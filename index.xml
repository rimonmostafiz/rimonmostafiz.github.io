<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rimon Mostafiz</title>
    <link>/</link>
    <description>Recent content on Rimon Mostafiz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 01 Jan 2021 11:35:48 +0600</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Haproxy on Macosx</title>
      <link>/blog/haproxy-on-macos/</link>
      <pubDate>Fri, 01 Jan 2021 11:35:48 +0600</pubDate>
      
      <guid>/blog/haproxy-on-macos/</guid>
      <description>Install Homebrew Open your terminal and then run command bellow to install homebrew
$ /bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;quot; Visit Homebrew official site for more details
Install haproxy using Homebrew brew install haproxy Add Configuration Update haproxy configution file located in /usr/local/etc/haproxy.cfg.
Create if dosen&amp;rsquo;t exists already.
Here is an initial configuration for you to start with
global log 127.0.0.1 local0 log 127.0.0.1 local1 debug maxconn 4096 user rimonmostafiz group admin daemon pidfile /var/run/haproxy.</description>
    </item>
    
    <item>
      <title>Get Insulted by sudo</title>
      <link>/blog/get-insulted-by-sudo/</link>
      <pubDate>Mon, 30 Jul 2018 14:35:07 +0600</pubDate>
      
      <guid>/blog/get-insulted-by-sudo/</guid>
      <description>Do you know sudo can insult you? wait, what ‚ùì üòï
Take a look at what I&amp;rsquo;m talking about. sudo can insult you for typing incorrect password. üí•
Enable insults in sudo Open a terminal and type:
$ sudo visudo  This should open the configuration file in your default editor. In ubuntu like distros, it will be opened in nano.
Now you will have to find the section where the defaults are listed.</description>
    </item>
    
    <item>
      <title>Manage npm Global Packages</title>
      <link>/blog/manage-npm-global-packages/</link>
      <pubDate>Sun, 29 Jul 2018 15:35:41 +0600</pubDate>
      
      <guid>/blog/manage-npm-global-packages/</guid>
      <description>This post is about how can we install, update, uninstall and list out installed global packages of NPM.
The commands that start with $ are meant to be run in the terminal or command line.The output of the command will follow immediately. Comments will begin with #.
Install Global Packages $ npm install -g &amp;lt;package&amp;gt;  For example, to install express globally, type
$ npm install -g express + express@4.16.3 added 50 packages from 47 contributors in 10.</description>
    </item>
    
    <item>
      <title>Goodbye Wordpress, Welcome to HUGO</title>
      <link>/blog/goodbye-wordpress-welcome-to-hugo/</link>
      <pubDate>Fri, 27 Jul 2018 20:01:41 +0600</pubDate>
      
      <guid>/blog/goodbye-wordpress-welcome-to-hugo/</guid>
      <description>Do you notice anything new? Of course not. No one follows my blog and theme does not matter. üòí
A weeks ago, I moved this site over from WordPress to HUGO(a static site generator). Also its now hosted to Netlify(üÜì)
This is my attempt to making everything more simple and content-focused. In this post, I will talk about some of my reasons for switching away from WordPress to a static site generator.</description>
    </item>
    
    <item>
      <title>Install and Manage Node JS Using NVM</title>
      <link>/blog/install-and-manage-node-js-using-nvm/</link>
      <pubDate>Sat, 07 Jul 2018 04:17:09 +0000</pubDate>
      
      <guid>/blog/install-and-manage-node-js-using-nvm/</guid>
      <description>Node Version Manager (NVM) is a simple bash script to manage multiple active node.js versions.
Install NVM To install or update nvm, you can use the¬†install script¬†using cURL or Wget
$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash $ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash  The script clones the nvm repository to¬†~/.nvm¬†and adds the source line to your profile (~/.bash_profile,¬†~/.zshrc,~/.profile, or¬†~/.bashrc).
export NVM_DIR=&amp;quot;$HOME/.nvm&amp;quot; [ -s &amp;quot;$NVM_DIR/nvm.sh&amp;quot; ] &amp;amp;&amp;amp; \.</description>
    </item>
    
    <item>
      <title>Spring Bean Wiring Using Javaconfig</title>
      <link>/blog/spring-bean-wiring-using-javaconfig/</link>
      <pubDate>Tue, 29 May 2018 10:19:29 +0000</pubDate>
      
      <guid>/blog/spring-bean-wiring-using-javaconfig/</guid>
      <description>In the previous post, I wrote about how can we implicitly wire beans automatically in Spring container. In my previous post I created a new maven project and started writing code so that we can understand the topics more clearly. In this post, I am documenting my learning of how we can wire bean using Explicit Java Configuration. I will work on the same project I have created earlier.
Explicit wiring using Java When an automatic configuration isn‚Äôt an option then we must configure Spring explicitly.</description>
    </item>
    
    <item>
      <title>Auto Bean Wiring of Spring</title>
      <link>/blog/auto-bean-wiring-of-spring/</link>
      <pubDate>Mon, 28 May 2018 07:44:03 +0000</pubDate>
      
      <guid>/blog/auto-bean-wiring-of-spring/</guid>
      <description>As we previously discussed that the Spring container is responsible for creating the beans in your application and coordinating the relationship between those objects vi DI. The act of creating these associations between application objects in the essence of dependency injection(DI) and is commonly referred to as wiring.
Different Types of Bean Wiring Spring Offers three primary wiring mechanism
 An explicit configuration in XML An explicit configuration in Java An Implicit bean discovery and automatic wiring  In this post, I am going to write notes about Spring&amp;rsquo;s automatic wiring, I will write about the other two in later posts.</description>
    </item>
    
    <item>
      <title>Spring Application Context and Configuration Metadata</title>
      <link>/blog/spring-application-context-and-configuration-metadata/</link>
      <pubDate>Sat, 26 May 2018 06:42:47 +0000</pubDate>
      
      <guid>/blog/spring-application-context-and-configuration-metadata/</guid>
      <description>In the last post¬†of Spring Diary, we discussed the basics of spring IoC Container and we saw a high-level view of how Spring Container works.
In this post, we will learn about how can we¬†Instantiate a Spring IoC container(using ApplicaitonContext¬†Interface) and configure that container using configuration metadata.
Spring IoC container consumes a form of¬†configuration metadata.¬†This configuration metadata represents how you as an application developer tell the Spring container to instantiate, configure, and assemble the objects in your application.</description>
    </item>
    
    <item>
      <title>The Spring IoC Container</title>
      <link>/blog/the-spring-ioc-container/</link>
      <pubDate>Thu, 15 Mar 2018 11:00:47 +0000</pubDate>
      
      <guid>/blog/the-spring-ioc-container/</guid>
      <description>There is some confusion these days over the meaning of inversion of control due to the rise of IoC containers.
An IoC container is a common characteristic of frameworks that implement Inversion of Control (IoC).
Some people confuse the general principle here with the specific styles of inversion of control (such as dependency injection) that these containers use.¬†It is a process whereby objects define their dependencies, that is, the other objects they work with, only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.</description>
    </item>
    
    <item>
      <title>Inversion of Control and Dependency Injection</title>
      <link>/blog/inversion-of-control-and-dependency-injection/</link>
      <pubDate>Wed, 14 Mar 2018 10:36:12 +0000</pubDate>
      
      <guid>/blog/inversion-of-control-and-dependency-injection/</guid>
      <description>Inversion of control¬†(IoC) In software engineering, inversion of control (IoC) is a design principle. It is used to invert different kinds of controls. More Specifically invert the control of your custom written program or objects of a program is transferred to a container or framework.
In traditional programming, our custom code that expresses the purpose of the program calls reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code.</description>
    </item>
    
  </channel>
</rss>
