<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>dependency-injection - Tag - cat /var/log/web</title>
        <link>rimonmostafiz.github.io/tags/dependency-injection/</link>
        <description>dependency-injection - Tag - cat /var/log/web</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 14 Mar 2018 10:36:12 &#43;0000</lastBuildDate><atom:link href="rimonmostafiz.github.io/tags/dependency-injection/" rel="self" type="application/rss+xml" /><item>
    <title>Inversion of Control and Dependency Injection</title>
    <link>rimonmostafiz.github.io/2018-03-14-inversion-of-control-and-dependency-injection/</link>
    <pubDate>Wed, 14 Mar 2018 10:36:12 &#43;0000</pubDate>
    <author>Author</author>
    <guid>rimonmostafiz.github.io/2018-03-14-inversion-of-control-and-dependency-injection/</guid>
    <description><![CDATA[Inversion of controlÂ (IoC) In software engineering, inversion of control (IoC) is a design principle. It is used to invert different kinds of controls. More Specifically invert the control of your custom written program or objects of a program is transferred to a container or framework.
In traditional programming, our custom code that expresses the purpose of the program calls reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code.]]></description>
</item></channel>
</rss>
