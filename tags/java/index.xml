<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>java - Tag - cat /var/log/web</title>
        <link>rimonmostafiz.github.io/tags/java/</link>
        <description>java - Tag - cat /var/log/web</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 29 May 2018 10:19:29 &#43;0000</lastBuildDate><atom:link href="rimonmostafiz.github.io/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>Spring Bean Wiring Using Javaconfig</title>
    <link>rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/</link>
    <pubDate>Tue, 29 May 2018 10:19:29 &#43;0000</pubDate>
    <author>Author</author>
    <guid>rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/</guid>
    <description><![CDATA[In the previous post, I wrote about how can we implicitly wire beans automatically in Spring container. In my previous post I created a new maven project and started writing code so that we can understand the topics more clearly. In this post, I am documenting my learning of how we can wire bean using Explicit Java Configuration. I will work on the same project I have created earlier.
Explicit wiring using Java When an automatic configuration isn’t an option then we must configure Spring explicitly.]]></description>
</item><item>
    <title>Auto Bean Wiring of Spring</title>
    <link>rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/</link>
    <pubDate>Mon, 28 May 2018 07:44:03 &#43;0000</pubDate>
    <author>Author</author>
    <guid>rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/</guid>
    <description><![CDATA[As we previously discussed that the Spring container is responsible for creating the beans in your application and coordinating the relationship between those objects vi DI. The act of creating these associations between application objects in the essence of dependency injection(DI) and is commonly referred to as wiring.
Different Types of Bean Wiring Spring Offers three primary wiring mechanism
 An explicit configuration in XML An explicit configuration in Java An Implicit bean discovery and automatic wiring  In this post, I am going to write notes about Spring&rsquo;s automatic wiring, I will write about the other two in later posts.]]></description>
</item><item>
    <title>Spring Application Context and Configuration Metadata</title>
    <link>rimonmostafiz.github.io/2018-05-26-spring-application-context-and-configuration-metadata/</link>
    <pubDate>Sat, 26 May 2018 06:42:47 &#43;0000</pubDate>
    <author>Author</author>
    <guid>rimonmostafiz.github.io/2018-05-26-spring-application-context-and-configuration-metadata/</guid>
    <description><![CDATA[In the last post of Spring Diary, we discussed the basics of spring IoC Container and we saw a high-level view of how Spring Container works.
In this post, we will learn about how can we Instantiate a Spring IoC container(using ApplicaitonContext Interface) and configure that container using configuration metadata.
Spring IoC container consumes a form of configuration metadata. This configuration metadata represents how you as an application developer tell the Spring container to instantiate, configure, and assemble the objects in your application.]]></description>
</item><item>
    <title>The Spring IoC Container</title>
    <link>rimonmostafiz.github.io/2018-03-15-the-spring-ioc-container/</link>
    <pubDate>Thu, 15 Mar 2018 11:00:47 &#43;0000</pubDate>
    <author>Author</author>
    <guid>rimonmostafiz.github.io/2018-03-15-the-spring-ioc-container/</guid>
    <description><![CDATA[There is some confusion these days over the meaning of inversion of control due to the rise of IoC containers.
An IoC container is a common characteristic of frameworks that implement Inversion of Control (IoC).
Some people confuse the general principle here with the specific styles of inversion of control (such as dependency injection) that these containers use. It is a process whereby objects define their dependencies, that is, the other objects they work with, only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.]]></description>
</item><item>
    <title>A Bit of Spring</title>
    <link>rimonmostafiz.github.io/2017-10-30-a-bit-of-spring/</link>
    <pubDate>Mon, 30 Oct 2017 09:19:54 &#43;0000</pubDate>
    <author>Author</author>
    <guid>rimonmostafiz.github.io/2017-10-30-a-bit-of-spring/</guid>
    <description><![CDATA[Spring MVC Java Configuration Spring traditionally supports two types of configurations:
 XML based configuration Annotation-based configuration  This post is about a bare minimum annotation-based configuration of spring MVC.
1. Maven Dependencies &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-framework-bom&lt;/artifactId&gt; &lt;version&gt;5.0.1.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;4.0.0-b02&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;  2. Configure DispatcherServlet package com.rimonmostafiz.config; import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer; public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer { protected String[] getServletMappings() { return new String[] {&quot;/&quot;}; } protected Class&lt;?]]></description>
</item><item>
    <title>Manage JDK Using SDKMAN</title>
    <link>rimonmostafiz.github.io/2017-10-20-manage-jdk-using-sdkman/</link>
    <pubDate>Fri, 20 Oct 2017 18:39:46 &#43;0000</pubDate>
    <author>Author</author>
    <guid>rimonmostafiz.github.io/2017-10-20-manage-jdk-using-sdkman/</guid>
    <description><![CDATA[What is SDKMAN? [SDKMAN!](http://sdkman.io/index.html) is a tool for managing parallel versions of multiple Software Development Kits on most Unix based systems. It provides a convenient Command Line Interface (CLI) and API for installing, switching, removing and listing Candidates. Its also open source. You can see the codes form [SDKMAN's github repository](https://github.com/sdkman). If you are a developer then its very common that you work on multiple projects which use different JDK version.]]></description>
</item><item>
    <title>Installing and Running Elasticsearch</title>
    <link>rimonmostafiz.github.io/2017-09-15-installing-and-running-elasticsearch/</link>
    <pubDate>Fri, 15 Sep 2017 12:36:35 &#43;0000</pubDate>
    <author>Author</author>
    <guid>rimonmostafiz.github.io/2017-09-15-installing-and-running-elasticsearch/</guid>
    <description><![CDATA[The easiest way to understand what Elasticsearch is to play with it, so let’s get started. Elastic search is easy to install. In this tutorial, I will walk you through the elasticsearch installation process in Ubuntu 16.04. Elasticsearch requires a recent version of java. Oracle JDK version 1.8 is recommended. I am using JDK 1.8.0_131.
Before you install Elasticsearch, please check your Java version first by running:
java -version echo $JAVA_HOME  We can download Elasticsearch from www.]]></description>
</item></channel>
</rss>
