[{"categories":null,"content":"Do you know sudo can insult you? wait, what ‚ùì üòï Take a look at what I‚Äôm talking about. sudo can insult you for typing incorrect password. üí• ","date":"2018-07-30","objectID":"rimonmostafiz.github.io/2018-07-30-get-insulted-by-sudo/:0:0","tags":["linux","terminal"],"title":"Get Insulted by sudo","uri":"rimonmostafiz.github.io/2018-07-30-get-insulted-by-sudo/"},{"categories":null,"content":"Enable insults in sudo Open a terminal and type: $ sudo visudo This should open the configuration file in your default editor. In ubuntu like distros, it will be opened in nano. Now you will have to find the section where the defaults are listed. Most probably you will find it at the top. Add following line to the section Defaults insults Now save the file. If you are using nano then use Ctrl+X to leave the editor. At the time of quitting, it will ask you if you want to save the changes. To keep the changes, press Y and Then Enter. Once you have saved the file you need to clear the old password from sudo‚Äôs memory by typing $ sudo -k NOTE: Always use visudo as it has a self-check system which will save you from messing up things. To me, this little tweak is funny and is better than the plain old Sorry, incorrect password error message. üòÉ ","date":"2018-07-30","objectID":"rimonmostafiz.github.io/2018-07-30-get-insulted-by-sudo/:0:1","tags":["linux","terminal"],"title":"Get Insulted by sudo","uri":"rimonmostafiz.github.io/2018-07-30-get-insulted-by-sudo/"},{"categories":null,"content":"Install, Update, List and Uninstall Global npm Packages","date":"2018-07-29","objectID":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/","tags":["npm","nodejs"],"title":"Manage npm Global Packages","uri":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/"},{"categories":null,"content":"This post is about how can we install, update, uninstall and list out installed global packages of NPM. The commands that start with $ are meant to be run in the terminal or command line. The output of the command will follow immediately. Comments will begin with #. ","date":"2018-07-29","objectID":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/:0:0","tags":["npm","nodejs"],"title":"Manage npm Global Packages","uri":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/"},{"categories":null,"content":"Install Global Packages $ npm install -g \u003cpackage\u003e For example, to install express globally, type $ npm install -g express + express@4.16.3 added 50 packages from 47 contributors in 10.433s ","date":"2018-07-29","objectID":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/:0:1","tags":["npm","nodejs"],"title":"Manage npm Global Packages","uri":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/"},{"categories":null,"content":"Update Global Packages $ npm update -g \u003cpackage\u003e For example, to update express globally type $ npm update -g express To find out which packages need to be updated, type $ npm outdated -g --depth=0 Package Current Wanted Latest Location nodemon 1.18.2 1.18.3 1.18.3 npm 6.1.0 6.2.0 6.2.0 To update all global packages, type $ npm update -g ","date":"2018-07-29","objectID":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/:0:2","tags":["npm","nodejs"],"title":"Manage npm Global Packages","uri":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/"},{"categories":null,"content":"List All Installed Global Packages $ npm list -g --depth 0 /home/rimonmostafiz/.nvm/versions/node/v10.6.0/lib ‚îú‚îÄ‚îÄ express@4.16.3 ‚îú‚îÄ‚îÄ nodemon@1.18.2 ‚îî‚îÄ‚îÄ npm@6.1.0 list -g: display a tree of every package found in the user‚Äôs folder(without the -g option it only shows the cureent directory‚Äôs packages) --depth 0 OR --depth=0: to avoid including every package‚Äôs dependencies in the tree view ","date":"2018-07-29","objectID":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/:0:3","tags":["npm","nodejs"],"title":"Manage npm Global Packages","uri":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/"},{"categories":null,"content":"Uninstall Global Packages $ npm uninstall -g \u003cpackage\u003e For example, uninstall express globally $ npm uninstall -g express removed 50 packages in 0.289s ","date":"2018-07-29","objectID":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/:0:4","tags":["npm","nodejs"],"title":"Manage npm Global Packages","uri":"rimonmostafiz.github.io/2018-07-29-manage-npm-global-packages/"},{"categories":null,"content":"Moving from Wordpress to Hugo","date":"2018-07-27","objectID":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/","tags":["static-site","hugo","smart-and-simple"],"title":"Goodbye Wordpress, Welcome to HUGO","uri":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/"},{"categories":null,"content":"Do you notice anything new? Of course not. No one follows my blog and theme does not matter. üòí A weeks ago, I moved this site over from WordPress to HUGO(a static site generator). Also its now hosted to Netlify(üÜì) This is my attempt to making everything more simple and content-focused. In this post, I will talk about some of my reasons for switching away from WordPress to a static site generator. I will discuss technical details in some future post. üòÉ ","date":"2018-07-27","objectID":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/:0:0","tags":["static-site","hugo","smart-and-simple"],"title":"Goodbye Wordpress, Welcome to HUGO","uri":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/"},{"categories":null,"content":"Why I Ditch Wordpress ‚ùì I‚Äôve been posting on this site for almost a year now. The entire site has been running on Wordpress. At first, I choose WordPress because it was easy(I thought) and popular. But that power and flexibility also comes at a cost. For me, there‚Äôs a lot of bloats. Stuff I actually don‚Äôt need. Plugins are often not well written. And Wordpress itself written in PHP üò£ And then there‚Äôs speed. Or the lack thereof. It‚Äôs 2018 and who wants a slow website? The average page load time was 5-7 seconds üò≠ and as we all know, site speed is essential for user experience. A slow website will even hurt your conversion rate. I actually use this site to share my learning experiences with others. I want to document my learning. For me, I want to focus on writing. The writing was taking forever. The WordPress dashboard had become unbearably slow. I got tired of fighting the CMS defaults. ","date":"2018-07-27","objectID":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/:0:1","tags":["static-site","hugo","smart-and-simple"],"title":"Goodbye Wordpress, Welcome to HUGO","uri":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/"},{"categories":null,"content":"What and Why Static Site ‚ùì What exactly a Static Site üòï It is exactly what it sounds like. It takes a collection of content files(markdown in the case of Hugo) and generates the static HTML, CSS, etc. files that formats and displays that content. This final content can then be hosted anywhere, without the need for server-side runtime support, such as Python/PHP/Go/Node/etc, because it does not require server-side processing üòâ to handle rendering the pages on the fly. Simplicity ‚úåÔ∏è A site generated using a static site generator is usually a combination of content written in Markdown and a theme. Writing in Markdown lets me focus more on the content rather than formatting. Furthermore, I can write Markdown in my favorite editor. I am currently using Atom. I am now able to edit locally. The default WordPress editor ties you down to editing online but Markdown can be written almost anywhere! Security üîê WordPress powers around 30% of all CMS-based websites on the internet. Being this popular does not come without some drawbacks. The volume of users is especially appealing to hackers trying to steal information. As a result, WordPress websites are often the victim of security breaches. WordPress sites depend on databases to hold the site‚Äôs content and databases are inherently vulnerable. A static site does not have some of the security concerns that a WordPress site brings. Pure static sites do not rely on databases. So no security threat. Maintenance üëª In addition to keeping plugins up to date with a WordPress site, you will also want to store backups of your site in case anything happens. I am tired of updating Wordpress and its plugins every other day. Static site needs Low maintenance efforts. No regular updates and backups required. All I need to push my local changes to my github repository and Its live. Speed üê∞ WordPress sites serve content to visitors by querying the database for the information for the page that the visitor is requesting. Once the information is retrieved, the server will also need to generate the page. On the other hand, static sites already have all the content ready to serve as it was pre-generated before the visitor even typed in your domain in their browser. Servers are great at serving static content so the visitor will be able to read your fantastic post even faster. ","date":"2018-07-27","objectID":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/:0:2","tags":["static-site","hugo","smart-and-simple"],"title":"Goodbye Wordpress, Welcome to HUGO","uri":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/"},{"categories":null,"content":"Welcome to HUGO ‚ù§Ô∏è From HUGO‚Äôs website Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. It‚Äôs written in Go (aka Golang) and developed by bep, spf13 and friends. Hugo is a CLI (command line interface) based static website generator. üòç Basically, you write a few HTML templates, put your CSS (and other assets) in a folder, write your content using markdown and then run the hugo command in the terminal. Hugo Will then builds your entire website in static HTML - ready to upload. So whenever I need to publish a new post, I simply run $ hugo new posts/post-title.md command in terminal and start writing on my favorite editor. I do not have experience with other static site generators but users have stated that Hugo‚Äôs generation process is blazingly fast. Apparently, sites with hundreds of pages can be generated in less than a second. üò± Another benefit of Hugo is that you don‚Äôt need to futz with an in-browser editor while writing pages. Hugo comes with a built-in production-grade server, which provides developers the option of watching for any changes in content. When content changes, Hugo will render that content again, and also trigger an update of your local webpage by way of a connected WebSocket. I can sit comfortably within my code editor of choice, and write a post in markdown. Each time I save the file, my webpage immediately updates to reflect the changes. ","date":"2018-07-27","objectID":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/:0:3","tags":["static-site","hugo","smart-and-simple"],"title":"Goodbye Wordpress, Welcome to HUGO","uri":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/"},{"categories":null,"content":"Results and Closing Thoughts üíØ I feel that Hugo fits the needs of my personal blog well and also makes writing content more enjoyable. So far I love it !! As the time of writing this post my homepage loads under ~0.87 ms üòç There is something quite satisfying about having the source of my site is so tangible while being easy to update, and easy to deploy. I don‚Äôt have to worry about a database, or hosting, or Wordpress site and plugin updates. I don‚Äôt have to worry about security since there are no dynamic pages or Wordpress vulnerabilities to guard against. I don‚Äôt have to mess with backups and exports from a hosting service since I check my entire site into github. Please, let me know if you find anything broken, I would really appreciate it! ","date":"2018-07-27","objectID":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/:0:4","tags":["static-site","hugo","smart-and-simple"],"title":"Goodbye Wordpress, Welcome to HUGO","uri":"rimonmostafiz.github.io/2018-07-27-goodbye-wordpress-welcome-to-hugo/"},{"categories":null,"content":"Manage ifferent version of node in your development environment using NVM","date":"2018-07-07","objectID":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/","tags":["nodejs","npm","nvm"],"title":"Install and Manage Node JS Using NVM","uri":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/"},{"categories":null,"content":"Node Version Manager (NVM) is a simple bash script to manage multiple active node.js versions. ","date":"2018-07-07","objectID":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/:0:0","tags":["nodejs","npm","nvm"],"title":"Install and Manage Node JS Using NVM","uri":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/"},{"categories":null,"content":"Install NVM To install or update nvm, you can use the¬†install script¬†using cURL or Wget $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash $ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash The script clones the nvm repository to¬†~/.nvm¬†and adds the source line to your profile (~/.bash_profile,¬†~/.zshrc,~/.profile, or¬†~/.bashrc). export NVM_DIR=\"$HOME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 \\. \"$NVM_DIR/nvm.sh\" # This loads nvm ","date":"2018-07-07","objectID":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/:1:0","tags":["nodejs","npm","nvm"],"title":"Install and Manage Node JS Using NVM","uri":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/"},{"categories":null,"content":"Verify installation To verify that nvm has been installed, do: $ command -v nvm which should output nvm if the installation was successful. Please note that willwhich nvm not work, since¬†nvm¬†is a sourced shell function, not an executable binary. After running the install script, if you get¬†nvm: command not found¬†or see no feedback from your¬†terminal,¬†simply close your current terminal, open a new terminal, and try verifying again. ","date":"2018-07-07","objectID":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/:1:1","tags":["nodejs","npm","nvm"],"title":"Install and Manage Node JS Using NVM","uri":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/"},{"categories":null,"content":"Usage With¬†nvm¬†installed, you can install isolated Node.js versions. For information about the versions of Node.js that are available, type: $ nvm ls-remote Which will give you something like ... v8.0.0 v8.1.0 v8.1.1 v8.1.2 v8.1.3 v8.1.4 v8.2.0 v8.2.1 v8.3.0 v8.4.0 v8.5.0 v8.6.0 v8.7.0 v8.8.0 v8.8.1 v8.9.0 (LTS: Carbon) v8.9.1 (LTS: Carbon) v8.9.2 (LTS: Carbon) v8.9.3 (LTS: Carbon) v8.9.4 (LTS: Carbon) v8.10.0 (LTS: Carbon) v8.11.0 (LTS: Carbon) v8.11.1 (LTS: Carbon) v8.11.2 (LTS: Carbon) v8.11.3 (Latest LTS: Carbon) v9.0.0 v9.1.0 v9.2.0 v9.2.1 v9.3.0 v9.4.0 v9.5.0 v9.6.0 v9.6.1 v9.7.0 v9.7.1 v9.8.0 v9.9.0 v9.10.0 v9.10.1 v9.11.0 v9.11.1 v9.11.2 v10.0.0 v10.1.0 v10.2.0 v10.2.1 v10.3.0 v10.4.0 v10.4.1 v10.5.0 v10.6.0 As you can see, at the time of writing this article the current LTS version of node is v8.11.3. You can install that by typing: $ nvm install 8.11.3 Usually,¬†nvm¬†will switch to use the most recently installed version. You can tell¬†nvm¬†to use the version you just downloaded by typing: $ nvm use 8.11.3 To download, compile, and install the latest release of node, You can simply do this: $ nvm install node And then in any new shell just use the installed version: $ nvm use node Or you can just run it: $ nvm run node --version Or, you can run any arbitrary command in a sub shell with the desired version of node: $ nvm 4.2 node --version When you install Node.js using¬†nvm, the executable is called¬†node. You can see the version currently being used by the shell by typing: $ node -v If you have multiple Node.js versions, you can see what is installed by typing: $ node ls If you wish to default one of the versions, type: $ nvm alias default 8.11.3 This version will be automatically selected when a new session spawns. You can also reference it by the alias like this: $ nvm use default Each version of Node.js will keep track of its own packages and has¬†npm¬†available to manage these. You can have¬†npm¬†install packages to the Node.js project‚Äôs¬†./node_modules¬†directory. Use the following syntax to install the¬†express¬†module: $ npm install express If you‚Äôd like to install the module globally, making it available to other projects using the same version of Node.js, you can add the¬†-g¬†flag: $ npm install -g express This will install the package in: ~/.nvm/versions/node/node_version/lib/node_modules/express Installing the module globally will let you run the commands from the command line, but you‚Äôll have to link the package into your local sphere to require it from within a program: $ npm link express You can learn more about the options available to you with nvm by typing: $ nvm help ","date":"2018-07-07","objectID":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/:2:0","tags":["nodejs","npm","nvm"],"title":"Install and Manage Node JS Using NVM","uri":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/"},{"categories":null,"content":"Removing Node.js To uninstall a version of Node.js that you have enabled using¬†nvm, first determine whether or not the version you would like to remove is the currently active version: $ nvm current If the version you are targeting is¬†not¬†the currently active version, you can run: $ nvm uninstall node_version This command will uninstall the selected version of Node.js. If the version you would like to remove¬†is¬†the currently active version, you must first deactivate¬†nvm¬†to enable your changes: $ nvm deactivate You can now uninstall the current version using the uninstall command above, which will remove all files associated with the targeted version of Node.js except the cached files that can be used for re-installment. ","date":"2018-07-07","objectID":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/:3:0","tags":["nodejs","npm","nvm"],"title":"Install and Manage Node JS Using NVM","uri":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/"},{"categories":null,"content":"Manual Uninstall To remove nvm manually, execute the following: $ rm -rf \"$NVM_DIR\" Edit ~/.bashrc (or other shell resource configuration) and remove the lines below: export NVM_DIR=\"$HOME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] \u0026\u0026 \\. \"$NVM_DIR/nvm.sh\" # This loads nvm [[ -r $NVM_DIR/bash_completion ]] \u0026\u0026 \\. $NVM_DIR/bash_completion ","date":"2018-07-07","objectID":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/:4:0","tags":["nodejs","npm","nvm"],"title":"Install and Manage Node JS Using NVM","uri":"rimonmostafiz.github.io/2018-07-07-install-and-manage-node-js-using-nvm/"},{"categories":null,"content":"In the previous post, I wrote about how can we implicitly wire beans automatically in Spring container. In my previous post I created a new maven project and started writing code so that we can understand the topics more clearly. In this post, I am documenting my learning of how we can wire bean using Explicit Java Configuration. I will work on the same project I have created earlier. ","date":"2018-05-29","objectID":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/:0:0","tags":["java","spring"],"title":"Spring Bean Wiring Using Javaconfig","uri":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/"},{"categories":null,"content":"Explicit wiring using Java When an automatic configuration isn‚Äôt an option then we must configure Spring explicitly. Let‚Äôs say that we want to wire components from some third-party library into¬†our application. Because¬†we don‚Äôt have the source code for that library, there‚Äôs no opportunity to annotate its classes with @Component and @Autowired annotations. Therefore, automatic configuration isn‚Äôt an option. We have two choices for explicit configuration: Java XML JavaConfig is the preferred option for explicit configuration because it‚Äôs more powerful, type-safe, and refactor-friendly. ","date":"2018-05-29","objectID":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/:0:1","tags":["java","spring"],"title":"Spring Bean Wiring Using Javaconfig","uri":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/"},{"categories":null,"content":"Create a configuration class To wire bean in JavaConfig, we need to create a Configuration Class and mark that with @Configuration annotation. This annotation identifies this class as a configuration class, and it‚Äôs expected to contain details of beans that are to be created in the Spring application context. package com.rimonmostafiz; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class StoreConfig { } ","date":"2018-05-29","objectID":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/:0:2","tags":["java","spring"],"title":"Spring Bean Wiring Using Javaconfig","uri":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/"},{"categories":null,"content":"Declare¬†A Bean To declare a bean in JavaConfig, we should create a method in our configuration class and creates an instance of the desired class and annotate the method with @Bean package com.rimonmostafiz; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class StoreConfig { @Bean Item foodItem() { return new FoodItem(); } } Here the @Bean annotation tells spring that this method will return an object and that should be registered as a bean in the Spring application context. By default, the bean will be given an Id same as the method name annotated with @Bean. If we want to give the bean a different¬†name then we can supply a name attribute in @Bean annotation like the example below package com.rimonmostafiz; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class StoreConfig { @Bean(name = \"myFoodItemBean\") Item foodItem() { return new FoodItem(); } } ","date":"2018-05-29","objectID":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/:0:3","tags":["java","spring"],"title":"Spring Bean Wiring Using Javaconfig","uri":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/"},{"categories":null,"content":"Inject Bean in JavaConfig So we Created a simple Item bean. It was simple and easy as It wasn‚Äôt dependent on any other bean. But now we are going to declare a Store bean which is dependent on Item bean. How to do it in JavaConfig? package com.rimonmostafiz; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class StoreConfig { @Bean(name = \"myFoodItemBean\") Item foodItem() { return new FoodItem(); } @Bean Store store() { return new Store(foodItem()); } } Here our store()method is similarly annotated with @Bean to indicate that it will produce an instance of a bean to be registered in the Spring application context. As no name attribute is present in @Bean so by default the bean name will be store, the same as the method‚Äôs name. The body of the method is different from the foodItem() method. The store instance is created by calling its constructor that takes a Item.¬†It appears that the Item is provided by calling foodItem , but that‚Äôs not exactly true. Because the foodItem() method is annotated with @Bean , Spring will intercept any calls to it and ensure that the bean produced by that method is returned rather than allowing it to be invoked again. For example, we want to introduce another Store bean that is just like the first one. @Bean Store store() { return new Store(foodItem()); } @Bean Store anotherStore() { return new Store(foodItem()); } Now here things get little tricky. If the call to foodItem() was treated like any other call to a Java method, then each store would be given its own instance of FoodItem. If you have two Store, there‚Äôs no physical way for a single item to simultaneously be present in two stores. Right? In software, however, there‚Äôs no reason you couldn‚Äôt inject the same instance into as many other beans as you want.¬†By default, all beans in Spring are singletons, and there‚Äôs no reason you need to create a duplicate instance for the second Store bean.¬†So Spring intercepts the call to foodItem() and makes sure that what is returned is the Spring bean that was created when Spring itself called foodItem() to create the Store bean. Therefore, both our Store beans will be given the same instance of FoodItem. Referring to a bean by calling its method can be confusing. There‚Äôs another way that might be easier to digest: @Bean Store store(Item foodItem) { return new Store(foodItem); } Here, the store() method asks for an Item as a parameter. When spring calls sotre() to create a Store bean, it autowire¬†an Item into the configuration method. This approach is to refer to other beans is usually the best choice because it doesn‚Äôt depend on the Item bean being declared in the same configuration class. In fact, you can even declare Item bean in XML configuration or automatically scanned and wired beans. No matter how its created spring will hand it to this configuration method to create the Store bean. ","date":"2018-05-29","objectID":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/:0:4","tags":["java","spring"],"title":"Spring Bean Wiring Using Javaconfig","uri":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/"},{"categories":null,"content":"Run Application Let‚Äôs test all this java configuration by creating an¬†App class. App.class Code package com.rimonmostafiz; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class App { public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(StoreConfig.class); Store store = (Store) context.getBean(\"store\"); store.showNotice(); } } ","date":"2018-05-29","objectID":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/:0:5","tags":["java","spring"],"title":"Spring Bean Wiring Using Javaconfig","uri":"rimonmostafiz.github.io/2018-05-29-spring-bean-wiring-using-javaconfig/"},{"categories":null,"content":"As we previously discussed that the Spring container is responsible for creating the beans in your application and coordinating the relationship between those objects vi DI. The act of creating these associations between application objects in the essence of dependency injection(DI) and is commonly referred to as wiring. ","date":"2018-05-28","objectID":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/:0:0","tags":["java","spring"],"title":"Auto Bean Wiring of Spring","uri":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/"},{"categories":null,"content":"Different Types of Bean Wiring Spring Offers three primary wiring mechanism An explicit configuration in XML An explicit configuration in Java An Implicit bean discovery and automatic wiring In this post, I am going to write notes about Spring‚Äôs automatic wiring, I will write about the other two in later posts. ","date":"2018-05-28","objectID":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/:0:1","tags":["java","spring"],"title":"Auto Bean Wiring of Spring","uri":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/"},{"categories":null,"content":"Automatically wiring beans Spring attacks automatic wiring from two angles: Component scanning - Spring automatically discovers beans to be created in the application context Autowiring - Spring automatically satisfies bean dependencies To understand¬†those concepts properly we will create a project for an online store, let‚Äôs create a new maven project first ","date":"2018-05-28","objectID":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/:0:2","tags":["java","spring"],"title":"Auto Bean Wiring of Spring","uri":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/"},{"categories":null,"content":"Add Dependency Now we need to add spring dependency to our pom.xml file \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003ecom.rimonmostafiz\u003c/groupId\u003e \u003cartifactId\u003espring-diary\u003c/artifactId\u003e \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e \u003cdependencyManagement\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-framework-bom\u003c/artifactId\u003e \u003cversion\u003e5.0.6.RELEASE\u003c/version\u003e \u003ctype\u003epom\u003c/type\u003e \u003cscope\u003eimport\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c/dependencyManagement\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-core\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-context\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-test\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003ejunit\u003c/groupId\u003e \u003cartifactId\u003ejunit\u003c/artifactId\u003e \u003cversion\u003e4.12\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c/project\u003e We are adding spring-core, spring-context, spring-test, and junitfor our dependency for now. Before going to the next part wait a minute and first think about an online store. Every online store has some items for sale, so the item is a dependency for a store. So we need an item for our store. The following listing shows Item, an interface that defines an item for the store. package com.rimonmostafiz; public interface Item { void readyForSell(); } As we added Item as an Interface we can have several Item implementations. Let‚Äôs add¬†one implementation of Item¬†for now called FoodItem package com.rimonmostafiz; import org.springframework.stereotype.Component; @Component public class FoodItem implements Item { String name = \"Pizza\"; String price = \"10.09$\"; public void readyForSell() { System.out.println(name + \" is ready for sell at \" + price); } } FoodItem is a simple class which implements the Item interface. what is important is FoodItem is annotated with @Component. ","date":"2018-05-28","objectID":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/:0:3","tags":["java","spring"],"title":"Auto Bean Wiring of Spring","uri":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/"},{"categories":null,"content":"@Component @Component Indicates that the annotated class is a ‚Äúcomponent‚Äù. Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning. This¬†annotation tells spring container that a bean should be created for the class. Now we need to write an explicit configuration to tell Spring to seek out all classes that are annotated with @Component¬†and to create beans from them. The configuration class in the following listing shows the minimal configuration to make this possible. package com.rimonmostafiz; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @Configuration @ComponentScan public class StoreConfig { } If we observe that StoreConfig doesn‚Äôt explicitly define any beans itself. Instead, it‚Äôs annotated with @ComponentScan to enable component scanning in Spring. ","date":"2018-05-28","objectID":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/:0:4","tags":["java","spring"],"title":"Auto Bean Wiring of Spring","uri":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/"},{"categories":null,"content":"@ComponentScan The @ComponentScan¬†annotation is used with the @Configuration¬†annotation to tell Spring the packages to scan for annotated components. @ComponentScan¬†also used to specify base packages and base package classes using basePackages¬†or basePackageClasses attributes of¬†@ComponentScan. @ComponentScan will default to scanning the same package as the configuration class. Therefore, because StoreConfig is in the com.rimonmostafiz¬†package, Spring will scan that package and any sub-packages underneath it, looking for classes that are annotated with @Component . It should find the Item class and automatically create a bean for it in Spring. The above configuration class is same as the XML listed bellow \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cbeans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"\u003e \u003ccontext:component-scan base-package=\"soundsystem\" /\u003e \u003c/beans\u003e In the above XML we are using Spring‚Äôs contextnamespace to turn on component scanning via XML configuration.¬†Even though XML is an option for enabling component scanning, I‚Äôm going to focus on using the preferred Java-based configuration for the remainder of this discussion. To test that component scanning is working we can write a simple JUnit test that creates a Spring application context and asserts that the Item bean is, in fact, created. package com.rimonmostafiz; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import static org.junit.Assert.assertNotNull; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = StoreConfig.class) public class StoreTest { @Autowired Item foodItem; @Test public void foodItemIsNotNull() { assertNotNull(foodItem); } } Here¬†the @ContextConfiguration annotation tells it to load its configuration from the StoreConfigclass. Because that configuration class includes @ComponentScan¬†,¬†the resulting application context should include the Item bean.¬†To prove that, the test has a property of type Item that is annotated with @Autowired to inject the Item bean into the test. Finally, a simple test method asserts that the foodItem property isn‚Äôt null. If it‚Äôs not null, that means Spring was able to discover the Item class, automatically create it as a bean in the Spring application context, and inject it into the test. ","date":"2018-05-28","objectID":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/:0:5","tags":["java","spring"],"title":"Auto Bean Wiring of Spring","uri":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/"},{"categories":null,"content":"@Autowired Aautowiring is a means of letting Spring automatically satisfy a bean‚Äôs dependencies by finding other beans in the application context that are a match to the bean‚Äôs needs. To indicate that autowiring should be performed, we can use @Autowired annotation. ","date":"2018-05-28","objectID":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/:0:6","tags":["java","spring"],"title":"Auto Bean Wiring of Spring","uri":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/"},{"categories":null,"content":"Test If you now run the test it will pass. ","date":"2018-05-28","objectID":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/:0:7","tags":["java","spring"],"title":"Auto Bean Wiring of Spring","uri":"rimonmostafiz.github.io/2018-05-28-auto-bean-wiring-of-spring/"},{"categories":null,"content":"In the last post¬†of Spring Diary, we discussed the basics of spring IoC Container and we saw a high-level view of how Spring Container works. In this post, we will learn about how can we¬†Instantiate a Spring IoC container(using ApplicaitonContext¬†Interface) and configure that container using configuration metadata. Spring IoC container consumes a form of¬†configuration metadata.¬†This configuration metadata represents how you as an application developer tell the Spring container to instantiate, configure, and assemble the objects in your application. We have three choices to configure container using configuration metadata XML-based configuration:¬†Configuration metadata is traditionally supplied in a simple and intuitive XML format.¬†Spring configuration consists of at least one and typically more than one bean definition that the container must manage. XML-based configuration metadata shows these beans configured as¬†\u003cbean/\u003e¬†elements inside a top-level¬†\u003cbeans/\u003e¬†element. Annotation-based configuration: Spring 2.5 introduced support for annotation-based configuration metadata. Java-based configuration: Starting with Spring 3.0, many features provided by the Spring JavaConfig project became part of the core Spring Framework. Thus you can define beans external to your application classes by using Java rather than XML files. ","date":"2018-05-26","objectID":"rimonmostafiz.github.io/2018-05-26-spring-application-context-and-configuration-metadata/:0:0","tags":["java","spring"],"title":"Spring Application Context and Configuration Metadata","uri":"rimonmostafiz.github.io/2018-05-26-spring-application-context-and-configuration-metadata/"},{"categories":null,"content":"Basic Structure of XML-based Configuration \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cbeans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"\u003e \u003cbean id=\"...\" class=\"...\"\u003e \u003c!-- collaborators and configuration for this bean go here --\u003e \u003c/bean\u003e \u003cbean id=\"...\" class=\"...\"\u003e \u003c!-- collaborators and configuration for this bean go here --\u003e \u003c/bean\u003e \u003c!-- more bean definitions go here --\u003e \u003c/beans\u003e The above example shows the basic structure of XML-based configuration metadata, where¬†The attributeid is a string that you use to identify the individual bean definition. The attributeclass defines the type of the bean and uses the fully qualified class name. The value of the id attribute refers to collaborating objects. ","date":"2018-05-26","objectID":"rimonmostafiz.github.io/2018-05-26-spring-application-context-and-configuration-metadata/:1:0","tags":["java","spring"],"title":"Spring Application Context and Configuration Metadata","uri":"rimonmostafiz.github.io/2018-05-26-spring-application-context-and-configuration-metadata/"},{"categories":null,"content":"Instantiating a container using the application context Spring comes with several flavors of the application context. Here are a few that you‚Äôll most likely encounter: AnnotationConfigApplicationContext: Loads a Spring application context from one or more Java-based configuration classes AnnotationConfigWebApplicationContext:¬†Loads a Spring web application context from one or more Java-based configuration classes ClassPathXmlApplicationContext: Loads a context definition from one or more XML files located in the classpath, treating context-definition files as class-path resources FileSystemXmlApplicationContext: Loads a context definition from one or more XML files in the filesystem XmlWebApplicationContext: Loads context definitions from one or more XML files contained in a web application Let‚Äôs see first how can we load beans from FileSystemXmlApplicationContest and¬†from the application‚Äôs classpath using ClassPathXmlApplicationContext, both of them are quite similar ApplicationContext context = new FileSystemXmlApplicationContext(\"/home/rimonmostafiz/Projects/spring-diary/beans.xml\"); ApplicationContext¬†context¬†=¬†new¬†ClassPathXmlApplicationContext(\"service.xml\", \"daos.xml\"); The following example shows the service layer objects¬†(services.xml)¬†configuration file: \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cbeans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"\u003e \u003c!-- services --\u003e \u003cbean id=\"petStore\" class=\"org.rimonmostafiz.samples.jpetstore.services.PetStoreServiceImpl\"\u003e \u003cproperty name=\"accountDao\" ref=\"accountDao\"/\u003e \u003cproperty name=\"itemDao\" ref=\"itemDao\"/\u003e \u003c!-- additional collaborators and configuration for this bean go here --\u003e \u003c/bean\u003e \u003c!-- more bean definitions for services go here --\u003e \u003c/beans\u003e The following example shows the data access objects¬†daos.xml¬†file: \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cbeans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"\u003e \u003cbean id=\"accountDao\" class=\"org.rimonmostafiz.samples.jpetstore.dao.jpa.JpaAccountDao\"\u003e \u003c!-- additional collaborators and configuration for this bean go here --\u003e \u003c/bean\u003e \u003cbean id=\"itemDao\" class=\"org.rimonmostafiz.samples.jpetstore.dao.jpa.JpaItemDao\"\u003e \u003c!-- additional collaborators and configuration for this bean go here --\u003e \u003c/bean\u003e \u003c!-- more bean definitions for data access objects go here --\u003e \u003c/beans\u003e In the preceding example, the service layer consists of the class¬†PetStoreServiceImpl, and two data access objects of the type¬†JpaAccountDao¬†and¬†JpaItemDao¬†(based on the JPA Object/Relational mapping standard). The¬†property name¬†element refers to the name of the JavaBean property, and the¬†ref¬†element refers to the name of another bean definition. This linkage between¬†id¬†and¬†ref¬†elements expresses the dependency between collaborating objects. Now if we want to load application context from a Java configuration, we can use AnnotationConfigApplicationContext,¬†Instead of specifying an XML file from which to load the Spring application context, AnnotationConfigApplicationContext loads configuration metadata from a configuration class ApplicationContext context = new AnnotationConfigApplicationContext(com.rimonmostafiz.springdiary.config.AppConfig.class); Instead of specifying an XML file from which to load the Spring application context, AnnotationConfigApplicationContext has been given a configuration class from which to load beans.¬†With an application context in hand, we can retrieve beans from the Spring container by calling the context‚Äôs getBean() method. ","date":"2018-05-26","objectID":"rimonmostafiz.github.io/2018-05-26-spring-application-context-and-configuration-metadata/:2:0","tags":["java","spring"],"title":"Spring Application Context and Configuration Metadata","uri":"rimonmostafiz.github.io/2018-05-26-spring-application-context-and-configuration-metadata/"},{"categories":null,"content":"There is some confusion these days over the meaning of inversion of control due to the rise of IoC containers. An IoC container is a common characteristic of frameworks that implement Inversion of Control (IoC). Some people confuse the general principle here with the specific styles of inversion of control (such as dependency injection) that these containers use.¬†It is a process whereby objects define their dependencies, that is, the other objects they work with, only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. The container then¬†injects¬†those dependencies when it creates the bean. This process is fundamentally the inverse, hence the name¬†Inversion of Control (IoC), of the bean itself controlling the instantiation or location of its dependencies by using a direct construction of classes, or a mechanism such as the¬†Service Locator pattern. ","date":"2018-03-15","objectID":"rimonmostafiz.github.io/2018-03-15-the-spring-ioc-container/:0:0","tags":["java","spring","ioc"],"title":"The Spring IoC Container","uri":"rimonmostafiz.github.io/2018-03-15-the-spring-ioc-container/"},{"categories":null,"content":"Spring IoC Container The container is at the core of the Spring Framework. Spring‚Äôs container uses DI to manage the components that make up an application. This¬†container is responsible for instantiating, configuring and assembling objects known as¬†beans, as well as managing their life-cycle. Spring comes with several container implementations of IoC Container. In Spring,¬†org.springframework.beansand¬†org.springframework.contextpackages are the basis of Spring‚Äôs IoC Container. The¬†BeanFactory: Defined by org.springframework.beans.factory.BeanFactory interface. It provides an advanced configuration mechanism capable of managing any type of object. It¬†Provides the configuration framework and basic functionality. The ApplicationContext:¬†Defined by¬†org.springframework.context.ApplicationContext interface.¬†Its a sub-interface of BeanFactory It adds more enterprise-specific functionality like easier integration with Spring‚Äôs AOP features; message resource handling (for use in internationalization), event publication; and application-layer specific contexts. ","date":"2018-03-15","objectID":"rimonmostafiz.github.io/2018-03-15-the-spring-ioc-container/:1:0","tags":["java","spring","ioc"],"title":"The Spring IoC Container","uri":"rimonmostafiz.github.io/2018-03-15-the-spring-ioc-container/"},{"categories":null,"content":"Overview of Container The above interfaces represent the Spring IoC container and are responsible for instantiating, configuring, and assembling the aforementioned beans. The next question pop out from the brain, what the hack is a bean? Bean Object in the Spring framework that we initialize through Spring container is called Spring Bean. The objects that form the backbone of your application and that are managed by the Spring IoC¬†container¬†are called¬†beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application.Any normal Java POJO class can be a Spring Bean if it‚Äôs configured to be initialized via container by providing configuration metadata information. Now the questions are, How container loads the beans? How does the container know which beans to wire together? Is it happening¬†magically? Nothing is happening magically inside the container,¬†In order to assemble beans, the container uses configuration metadata. The container gets its instructions on what objects to instantiate, configure, and assemble by reading this configuration metadata.¬†which can be¬†represented in XML, Java annotations, or Java code. As an Application Developer, it‚Äôs your job to write this configuration metadata. The diagram is a high-level view of how Spring Container works. Your application classes are combined with configuration metadata so that after the ApplicationContext¬†is created and initialized, you have a fully configured and executable system or application. ","date":"2018-03-15","objectID":"rimonmostafiz.github.io/2018-03-15-the-spring-ioc-container/:2:0","tags":["java","spring","ioc"],"title":"The Spring IoC Container","uri":"rimonmostafiz.github.io/2018-03-15-the-spring-ioc-container/"},{"categories":null,"content":"Inversion of control¬†(IoC) In software engineering, inversion of control (IoC) is a design principle. It is used to invert different kinds of controls. More Specifically invert the control of your custom written program or objects of a program is transferred to a container or framework. In traditional programming, our custom code that expresses the purpose of the program calls reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code. IoC is sometimes referred to as the¬†Hollywood Principle (‚ÄúDon‚Äôt call us, we‚Äôll call you‚Äù).¬†Simply the flow of control of an application is not controlled by the application itself, but rather by the underlying framework. Example of IoC Suppose you drive a car to your workplace, it means you control the car. IoC principle suggests to invert the control, meaning instead of driving the car yourself, you hire a cab where another person will drive the car. Thus it is called inversion of the control from you to the cab driver. You don‚Äôt have to drive a car yourself and let the driver do the driving so that you can focus on your main work. Inversion of Control can be achieved through various mechanisms such as: Strategy design pattern, Service Locator pattern, Factory pattern, and Dependency Injection (DI). ","date":"2018-03-14","objectID":"rimonmostafiz.github.io/2018-03-14-inversion-of-control-and-dependency-injection/:0:1","tags":["dependency-injection","ioc"],"title":"Inversion of Control and Dependency Injection","uri":"rimonmostafiz.github.io/2018-03-14-inversion-of-control-and-dependency-injection/"},{"categories":null,"content":"Dependency Injection(DI) In software engineering, dependency injection is a technique whereby one object supplies the dependencies of another object. Dependency Injection was originally called Inversion of Control (IoC). The normal control sequence would be the object finds the objects it depends on by itself and then calls them. Here, this is reversed: The dependencies are handed to the object when it‚Äôs created. This also illustrates the Hollywood Principle at work: Don‚Äôt call around for your dependencies, we‚Äôll give them to you when we need you. The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code. One of the purposes of Dependency Injection is to reduce coupling in your application to make it more flexible and easier to test. Example Of DI Say you have A Repository class which responsible for handing¬†over data to you from a Datasource. We need to instantiate an implementation of the Datasource Interface within the Repository. public class Repository { private Datasource dataSource; public Repository () { this.dataSource = new Datasource(); } } The Repository could establish a connection to the Datasource by itself. But what if it allowed you to pass in a connection to the Datasource through the Repository‚Äôs constructor? public class Repository { private Datasource dataSource; public Repository (Datasource dataSource) { this.dataSource = dataSource; } } In the first code example, we are instantiating¬†Datasource this.dataSource = new Datasource(); which means the¬†Repository¬†class directly depends on the¬†Datasource class. In the second code example, we are creating an abstraction by having the¬†Datasource dependency class in¬†Repository¬†constructor signature (not initializing dependency in class). This allows us to call the dependency then pass it to the Repository class like below Datasource dc = new MySqlDataSource(); // dependency Repository rep = new Repository(dc); // caller is injecting dependency Now the client creating the¬†Repository¬†class has the control over which¬†DataSource implementation to use because we‚Äôre injecting the dependency to the¬†Repository. You have just¬†inverted control¬†by handing the responsibility of creating the connection from the Repository class to the caller. Martin Fowler suggests using the term ‚ÄúDependency Injection‚Äù to describe this type of Inversion of Control since Inversion of Control as a concept can be applied more broadly than just injecting dependencies in a constructor method. I don‚Äôt think anyone can explain it better than Martin Fowler does, further down¬†the article you linked to. ","date":"2018-03-14","objectID":"rimonmostafiz.github.io/2018-03-14-inversion-of-control-and-dependency-injection/:0:2","tags":["dependency-injection","ioc"],"title":"Inversion of Control and Dependency Injection","uri":"rimonmostafiz.github.io/2018-03-14-inversion-of-control-and-dependency-injection/"},{"categories":null,"content":"HttpServletResponse The HttpServletResponse interface extends ServletResponse and provides access to the HTTP protocol-specific properties¬†of a response. You can use the response object to do things such as Set response headers Write to the response body Redirect the request Set the HTTP status code Send cookies back to the client. ","date":"2018-01-09","objectID":"rimonmostafiz.github.io/2018-01-09-know-your-response-object/:1:0","tags":["javaee","servlet","web-application","response"],"title":"Know Your Response Object","uri":"rimonmostafiz.github.io/2018-01-09-know-your-response-object/"},{"categories":null,"content":"Writing to Response Body The most common thing you‚Äôll do with a response object is written content to the response body. This might be HTML to display¬†in a browser An image that the browser is retrieving The contents of a file that the client is¬†downloading. It could be plain text or binary data It might be just a few bytes long or it could be¬†gigabytes long. The getOutputStream: Returns a javax.servlet.ServletOutputStream,¬†for sending binary¬†data back, you must use the ServletOutputStream to send the response bytes. The getWriter: Returns a java.io.PrintWriter, you would probably want to use the¬†PrintWriter for returning HTML or some other character-encoded text to the client because this¬†makes it easy to write encoded String s and char s to the response. Also, you should¬†never use both getOutputStream and getWriter in the same response. After a call to one, a call to the other will fail with an IllegalStateException. Set the content type or encoding While you‚Äôre writing to the response body, it might be necessary to set the content type or encoding. setContentType and setCharacterEncoding methods serves the purpose. You may call these methods¬†as many times as you like; the last call to the method is the one that matters. Note To Remember If you¬†plan to call setContentType and setCharacterEncoding along with getWriter, you must call¬†setContentType and setCharacterEncoding beforer¬†getWriter¬†so that the returned writer is¬†configured for the correct character encoding. Calls made after getWriter are ignored. If you do¬†not call setContentType and setCharacterEncoding before calling getWriter, the returned¬†writer uses the container‚Äôs default encoding. ","date":"2018-01-09","objectID":"rimonmostafiz.github.io/2018-01-09-know-your-response-object/:1:1","tags":["javaee","servlet","web-application","response"],"title":"Know Your Response Object","uri":"rimonmostafiz.github.io/2018-01-09-know-your-response-object/"},{"categories":null,"content":"Setting Headers and Other Response Properties The setHeader,¬†setIntHeader, and setDateHeader: To set nearly any header value you desire. If the existing¬†response headers already include a header with the name you are setting, the value of that¬†header will be overridden. The addHeader, addIntHeader,¬†and addDateHeader: These versions do not override existing header values, but instead¬†add additional values for the given headers. The getHeader, getHeaders, getHeaderNames, and containsHeader: To check which headers have already been set on¬†the response. The setStatus: To set the HTTP response status code The getStatus: To determine what the current status of the response is The sendError: To set the status code, indicate an optional error message to write to the¬†response data, direct the web container to provide an error page to the client, and clear the¬†buffer The sendRedirect: To redirect the client to a different URL ","date":"2018-01-09","objectID":"rimonmostafiz.github.io/2018-01-09-know-your-response-object/:1:2","tags":["javaee","servlet","web-application","response"],"title":"Know Your Response Object","uri":"rimonmostafiz.github.io/2018-01-09-know-your-response-object/"},{"categories":null,"content":"HTTPServletRequest The HServletRequestttp interface is an extension of ServletRequest that provides additional HTTP protocol-specific information about a received request. It specifies dozens of methods that you can use to obtain details about an HTTP request. It also permits you to set request attributes (different from request parameters). ","date":"2017-12-13","objectID":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/:1:0","tags":["javaee","web-application","servlet","request"],"title":"Know Your Request Object","uri":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/"},{"categories":null,"content":"Request Param Request parameters come in two different forms: Query parameters (also called URI parameters) An application/x-www-form-urlencoded or multipart/form-data encoded request body(typically called post variables or form variables). ‚û§ Query Parameters Query parameters are supported with all request methods and are contained in the first line of data in an HTTP request Example: GET /index.jsp?productId=9854521\u0026category=Book HTTP/1.1 In the above example there are two query parameters one is productId and another one is the category. ‚û§ POST Variables If we want to pass the same parameters in the request body as post variables **Example:¬†** POST /index.jsp?returnTo=productPage HTTP/1.1 HSOT: www.example.com Content-Length: 48 Contest-Type: application/x-www-form-urlencoded addToCart\u0026productId=9854521\u0026category=Book This post request has post variables and query parameter both. The Servlet API does not differentiate between the two types of parameters. If we call the parameter-related methods on a request object returns parameters whether they were delivered as query parameters or post variables. ","date":"2017-12-13","objectID":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/:1:1","tags":["javaee","web-application","servlet","request"],"title":"Know Your Request Object","uri":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/"},{"categories":null,"content":"Get Params The getParameter method returns a single value for a parameter. If the parameter has multiple values, it returns the first value The getParameterValues returns an array of values for a parameter. The getParameterMap method returns a java.util.Map\u003cString, String[]\u003e containing all the parameter names mapped to their values The getParameterNames method returns an enumeration of the names of all the available parameters ‚û§‚û§ Note To Remember When we call getParameter, getParameterValues, getParameterMap or getParameterNames for the first time on a request object, the web container determines whether the request contains post variables by obtaining the request‚Äôs InputStream. Remember that the Request‚Äôs InputStream can be read only once. If you call getInputStream or getReader request containing post variables and then later attempt to retrieve parameters in that request, the attempt to retrieve the parameters results in an IllegalStateException. Likewise, if you retrieve parameters on a request containing post variables and then later call getInputStream or getReader, IT will fail with an IllegalStateException. ","date":"2017-12-13","objectID":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/:1:2","tags":["javaee","web-application","servlet","request"],"title":"Know Your Request Object","uri":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/"},{"categories":null,"content":"Know Request Content There are several methods that come in handy when you need help determine the type, length, and encoding of the content of the HTTP request. The getContentType method returns the MIME content type of the request such as_ application/x-www-form-urlencoded_ , _application/json_ , _text/plain_. The getContentLength method both return the number of bytes in the request body(the content length). The¬†getContentLengthLong(Minimum servlet 3.1 specification in Java EE 7) method being useful for requests whose content might exceed gigabytes. The getCharacterEncoding method returns the character encoding (such as UTF-8 or ISO-8859-1) of the request contents whenever the request contains character-type content. ","date":"2017-12-13","objectID":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/:1:3","tags":["javaee","web-application","servlet","request"],"title":"Know Your Request Object","uri":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/"},{"categories":null,"content":"Know Request Characteristics The getRequestURL: Returns the entire URL that the client used to make the request, including protocol( HTTP or HTTPS ), server name, port number, and server path but not including the query string. So, in a request to _http://www.example.org/application/index.jsp?category=Books_ getRequestURL returns _http://www.example.org/application/index.jsp_ The getRequestURI: This is slightly different from getRequestURL in that it returns only the server path part of the URL. As previous example, that would be /application/index.jsp The getServletPath: Similar to getRequestURI, this returns even less of the URL. If the request is /hello-world/greeting? foo=world, the application is deployed as /hello-world on Tomcat, and the servlet-mappings are /greeting, /hello, and /thank, getServletPath returns only the part of the URL used to match the servlet mapping:_ /greeting._ The getHeader: Returns the value of a header with the given name. The case of the header does not have to match the case of the string passed into the method, so getHeader( \" content-type \" ) can match the Content-Type header. If there are multiple headers with the same name, this returns only the first value. In such cases, you would want to use the getHeaders method to return an enumeration of all the values. The getHeaderNames: Returns an enumeration of the names of all the headers in the request. A great way to iterate over the available headers. The getIntHeader: If you have a particular header that you know is always a number, you can call this to return the value already converted to a number. It throws a NumberFormatException if the header cannot be converted to an integer. The getDateHeader: You can call this to return the (millisecond) Unix timestamp-equivalent of a header value that represents a valid timestamp. It throws an IllegalArgumentException if the header value is not recognized as a date. ","date":"2017-12-13","objectID":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/:1:4","tags":["javaee","web-application","servlet","request"],"title":"Know Your Request Object","uri":"rimonmostafiz.github.io/2017-12-13-know-your-request-object/"},{"categories":null,"content":" First, let‚Äôs create a maven project and add the dependency. As a prerequisite, JDK 8 will be needed. If you are using Linux¬†based operating system then I have written a post on how to install and manage different versions of JDK in your system. You can visit this post if JDK¬†8 is not installed on your system. ","date":"2017-12-12","objectID":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/:0:0","tags":["javaee","tomcat","servlet","web-application"],"title":"Up and Running With Servlet in Tomcat","uri":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/"},{"categories":null,"content":"Maven Dependency \u003cdependency\u003e \u003cgroupId\u003ejavax.servlet\u003c/groupId\u003e \u003cartifactId\u003ejavax.servlet-api\u003c/artifactId\u003e \u003cversion\u003e3.1.0\u003c/version\u003e \u003cscope\u003eprovided\u003c/scope\u003e \u003c/dependency\u003e ","date":"2017-12-12","objectID":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/:0:1","tags":["javaee","tomcat","servlet","web-application"],"title":"Up and Running With Servlet in Tomcat","uri":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/"},{"categories":null,"content":"Creating a servlet Class In Java, a Servlet is what receives and responds to requests from the end user. The Java EE API specification defines a Servlet as follows: A Servlet is a small Java program that runs within a Web server. Servlets receive and respond to requests from Web clients, usually across HTTP, the HyperText Transfer Protocol. Every Servlet implements the javax.servlet.Servlet interface, but usually not directly. In almost all cases, Servlets inherit from javax.servlet.GenericServletGenericServlet is still a protocol-independent Servlet with the lone, abstract service method, but it contains several helper methods for logging and getting information about the application and Servlet configuration. For responding to HTTP-specific requests, javax.servlet.http.HttpServlet extends GenericServlet and implements the service method to accept only HTTP requests. import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; public class StartingServlet extends HttpServlet { } Above service is already prepared to accept an HTTP request and respond to it with an405 Method Not Allowed error. So let us override the doGet method to add support for the HTTP method GET: import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; public class StartingServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.getWriter().println(\"Hello\"); } } ","date":"2017-12-12","objectID":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/:0:2","tags":["javaee","tomcat","servlet","web-application"],"title":"Up and Running With Servlet in Tomcat","uri":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/"},{"categories":null,"content":"Initializer and Destroyer When a web container first starts a Servlet, it calls that Servlet‚Äôs init method. Later when the web container shuts down the Servlet, it calls the Servlet‚Äôs destroy method. These methods are not the same as the Java constructor and finalizer, and they are not called at the same time as the constructor and finalizer. Normally, these methods do nothing, but you can override them to perform some action @Override public void init() throws ServletException { System.out.println(\"Servlet \" + this.getServletName() + \" has started.\"); } @Override public void destroy() { System.out.println(\"Servlet \" + this.getServletName() + \" has stopped.\"); } init is called after the Servlet is constructed but before it can respond to the first request. Unlike when the constructor is called, when init is called all the properties have been set on the Servlet, giving you access to the ServletConfig and javax.servlet.ServletContext objects. The init method is called when the Servlet starts. If the Servlet is configured to start automatically when the web application is deployed and started, that is when it is called. Otherwise, it is not called until the first request for that Servlet is received. Likewise, destroy is called immediately after the Servlet can no longer accept any requests. This typically happens either when the web application is stopped or un-deployed or when the web container shuts down. ","date":"2017-12-12","objectID":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/:0:3","tags":["javaee","tomcat","servlet","web-application"],"title":"Up and Running With Servlet in Tomcat","uri":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/"},{"categories":null,"content":"Adding the Deployment Descriptor(web.xml) It describes how the web application should be deployed.Its written In XML. The deployment descriptor is a file which will be used by Application Server/Web Container. It directs a deployment tool to deploy a module or application with the specified security settings and describes other specific configuration requirements and/or container options. The web application deployment descriptor is named web.xml, and when included with a web application, it must reside in a WEB-INF sub directory at the web application root. \u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003cweb-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"\u003e \u003cdisplay-name\u003ejava-web-app\u003c/display-name\u003e \u003cservlet\u003e \u003cservlet-name\u003estartingServlet\u003c/servlet-name\u003e \u003cservlet-class\u003eStartingServlet\u003c/servlet-class\u003e \u003c/servlet\u003e \u003cservlet-mapping\u003e \u003cservlet-name\u003estartingServlet\u003c/servlet-name\u003e \u003curl-pattern\u003e/hello\u003c/url-pattern\u003e \u003c/servlet-mapping\u003e \u003c/web-app\u003e In the above file, we instructed the web container to create an instance of the Servlet we wrote earlier, using the \u003cservlet\u003e tag. And we used \u003cservlet-mapping\u003e tag to mapped¬†the servlet. All requests to the application-relative URL /hello will be handled by the startingServlet. ","date":"2017-12-12","objectID":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/:0:4","tags":["javaee","tomcat","servlet","web-application"],"title":"Up and Running With Servlet in Tomcat","uri":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/"},{"categories":null,"content":"pom.xml File Final pom.xml file looks like this \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003ecom.rimonmostafiz\u003c/groupId\u003e \u003cartifactId\u003ejava-web-app\u003c/artifactId\u003e \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003ejavax.servlet\u003c/groupId\u003e \u003cartifactId\u003ejavax.servlet-api\u003c/artifactId\u003e \u003cversion\u003e3.1.0\u003c/version\u003e \u003cscope\u003eprovided\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003cbuild\u003e \u003csourceDirectory\u003esrc/main/java\u003c/sourceDirectory\u003e \u003cresources\u003e \u003cresource\u003e \u003cdirectory\u003esrc/main/resources\u003c/directory\u003e \u003c/resource\u003e \u003c/resources\u003e \u003ctestSourceDirectory\u003esrc/test/java\u003c/testSourceDirectory\u003e \u003ctestResources\u003e \u003ctestResource\u003e \u003cdirectory\u003esrc/test/resources\u003c/directory\u003e \u003c/testResource\u003e \u003c/testResources\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-war-plugin\u003c/artifactId\u003e \u003cversion\u003e3.0.0\u003c/version\u003e \u003cconfiguration\u003e \u003cwarSourceDirectory\u003eweb\u003c/warSourceDirectory\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e \u003cversion\u003e3.6.1\u003c/version\u003e \u003cconfiguration\u003e \u003csource\u003e1.8\u003c/source\u003e \u003ctarget\u003e1.8\u003c/target\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c/project\u003e Now If you want to run this in tomcat then I have made a video how to create this whole project and configure tomcat in IntelliJ-IDEA to run this. Check the video from the top of the post. I am not an expert, I already told That I‚Äôm just documenting my learning. So If you find any¬†anomaly feel free to add a comment. Also, any queries, thoughts, and suggestions will be appreciated. ","date":"2017-12-12","objectID":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/:0:5","tags":["javaee","tomcat","servlet","web-application"],"title":"Up and Running With Servlet in Tomcat","uri":"rimonmostafiz.github.io/2017-12-12-up-and-running-with-servlet-in-tomcat/"},{"categories":null,"content":"Standard Java EE web applications are deployed as WAR files or exploded (unarchived) web application directories.¬†All Java EE web application servers support WAR file application archives.¬†Whether archived or exploded, the directory structure convention, as shown in Figure is the same. This structure contains classes and other application resources,¬†the class files live in /WEB-INF/classes.¬†The WEB-INF directory stores informational and instructional files that Java EE web application servers use to determine how to deploy and run the application. Its classes directory acts as the package root. All compiled application class files and other resources live within this directory. WAR files can contain bundled JAR files, which live in /WEB-INF/lib. All the classes in the JAR files in this directory are also available to the application on the application‚Äôs classpath. The /WEB-INF/tags and /WEB-INF/tld¬†directories are reserved for holding JSP tag files and tag library descriptors, respectively. The i18n directory is not actually part of the Java EE specifications, but it is a convention that most application developers follow for storing internationalization (i18n) and localization (L10n) files. There are two different META-INF directories. The root-level /META-INF directory contains the application manifest file. This¬†directory is not on the application classpath. You cannot use the ClassLoader to obtain resources in this directory. It¬†contains resources for specific web containers or application servers. For example, Apache Tomcat looks for and uses a context.xml file in this directory to help customize how the application is deployed in Tomcat. None of these files¬†are part of the Java EE specification, and the supported files can vary from one application server or web container to the next. WEB-INF/classes/META-INF is on the classpath. Any application resources you desire in this directory, and they become accessible through the ClassLoader. Some Java EE components specify files that belong in this directory. For example, the Java Persistence API specifies two files,¬†persistence.xml, and¬†orm.xml ‚Äî that live in /WEB-INF/classes/META-INF. Most files contained within a WAR file or exploded web application directory are resources directly accessible through a URL. For example, the file /bar.html relative to the root of an application deployed to _http://example.org/foo_ is accessible from _http://example.org/foo/bar.html_. In the absence of any filter or security rules to the contrary, this holds true for all resources in your application except those resources under the /WEB-INF and /META-INF directories. The files in these directories are protected resources that are not accessible via URL. ","date":"2017-12-12","objectID":"rimonmostafiz.github.io/2017-12-12-web-application-directory-structure-and-war-files/:0:0","tags":["javaee","web-application"],"title":"Web Application Directory Structure and WAR Files","uri":"rimonmostafiz.github.io/2017-12-12-web-application-directory-structure-and-war-files/"},{"categories":null,"content":"Basic Web Application Structure A lot of components go into making a Java EE application. Application Code and Third Party Libraries it depends on Deployment Descriptor, which includes instructions for deploying and starting the application ClassLoders¬†which is responsible for isolating your application form other web applications on the same server Finally the WAR and EAR files ","date":"2017-12-12","objectID":"rimonmostafiz.github.io/2017-12-12-basic-web-application-structure-of-javaee/:0:1","tags":["javaee","servlet","web-application"],"title":"Basic Web Application Structure of JavaEE","uri":"rimonmostafiz.github.io/2017-12-12-basic-web-application-structure-of-javaee/"},{"categories":null,"content":"Servlets, Filters, Listeners, and JSPs Servlets are a key component of any Java EE applications. Servlets are Java classes responsible for accepting and responding to the HTTP request. Nearly every request to your application goes through a Servlet of some type, except those requests that are erroneous or intercepted by some other component. Filter is one such component that can intercept requests to your Servlets. Java EE web applications support various types of listeners, which¬†can notify your code of multiple events, such as application startup, application shutdown, HTTP session creation, and session destruction. And finally, we have jsp(JavaServer Pages), which provides you with the means to easily create dynamic, HTML based graphical user interfaces for web applications. ","date":"2017-12-12","objectID":"rimonmostafiz.github.io/2017-12-12-basic-web-application-structure-of-javaee/:0:2","tags":["javaee","servlet","web-application"],"title":"Basic Web Application Structure of JavaEE","uri":"rimonmostafiz.github.io/2017-12-12-basic-web-application-structure-of-javaee/"},{"categories":null,"content":"How to set up alias in Linux Every time I need to see different projects logs from application servers logs folder from different terminal window,¬†I have to go to Weblogic‚Äôs logs folder and then open the log file using less or tail -f project-name.log¬† cd /home/rimonmostafiz/Applications/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/logs/ less project-name.log or¬†tail -f project-name.log I don‚Äôt want to write this long string Everytime,¬†Wouldn‚Äôt it be easier to just type something like the following? logs less project-name.log ","date":"2017-11-30","objectID":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/:1:0","tags":["linux","alias","terminal"],"title":"Command Aliases in Ubuntu Linux","uri":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/"},{"categories":null,"content":"Open your .bashrc file Your¬†.bashrc¬†file is located in your user directory. Open it in your favorite text editor. I like vim vim ~/.bashrc Then go to the end of the file In vim you can Press¬†Shift + G (Will go to the last line of your file) Then Press¬†Shift + A (Will start appending after the last line) Then Press¬†Enter ","date":"2017-11-30","objectID":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/:1:1","tags":["linux","alias","terminal"],"title":"Command Aliases in Ubuntu Linux","uri":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/"},{"categories":null,"content":"Add alias Basic format of the alias is alias aliasname='mycommand' Note that there is no space between alias name and the EQUAL(=) and command So my alias should be alias logs='cd /home/rimonmostafiz/Applications/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/logs/' ","date":"2017-11-30","objectID":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/:1:2","tags":["linux","alias","terminal"],"title":"Command Aliases in Ubuntu Linux","uri":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/"},{"categories":null,"content":"Chain Multiple Commands In alias alias logs='cd /home/rimonmostafiz/Applications/Oracle/Middleware/Oracle_Home/ \u0026\u0026 cd user_projects/domains/base_domain/logs/' This \u0026\u0026 operator will run a set of commands and only continue to the next command if the previous one was successful. ","date":"2017-11-30","objectID":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/:1:3","tags":["linux","alias","terminal"],"title":"Command Aliases in Ubuntu Linux","uri":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/"},{"categories":null,"content":"Write and Close .bashrc File In vim, Press ESCAPE¬†to get to normal mode and run the following command and press ENTER to write and quit: :wq If you use any other editor, just save and close the file. ","date":"2017-11-30","objectID":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/:1:4","tags":["linux","alias","terminal"],"title":"Command Aliases in Ubuntu Linux","uri":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/"},{"categories":null,"content":"Source .bashrc $source ~/.bashrc Done, Now your alias should work. ","date":"2017-11-30","objectID":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/:1:5","tags":["linux","alias","terminal"],"title":"Command Aliases in Ubuntu Linux","uri":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/"},{"categories":null,"content":"Another Cool Approach So Isn‚Äôt it be cooler If you could do something like this? less_logs project-name.log tail-f_logs project-name.log Guess what, Yes you can¬†do that :) alias¬†does¬†not accept parameters but a function can be called just like an alias. For example: ","date":"2017-11-30","objectID":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/:1:6","tags":["linux","alias","terminal"],"title":"Command Aliases in Ubuntu Linux","uri":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/"},{"categories":null,"content":"Function call like alias I have added following functions in my .bashrc less_logs() { cd /home/rimonmostafiz/Applications/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/logs/; less \"$1\"; } tail_f_logs() { cd /home/rimonmostafiz/Applications/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/logs/; tail -f \"$1\"; } That‚Äôs it, It can save your time and increase your efficiency :) ","date":"2017-11-30","objectID":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/:1:7","tags":["linux","alias","terminal"],"title":"Command Aliases in Ubuntu Linux","uri":"rimonmostafiz.github.io/2017-11-30-command-aliases-in-linux/"},{"categories":null,"content":"Spring MVC Java Configuration Spring traditionally supports two types of configurations: XML based configuration Annotation-based configuration This post is about a bare minimum annotation-based configuration of spring MVC. 1. Maven Dependencies \u003cdependencyManagement\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-framework-bom\u003c/artifactId\u003e \u003cversion\u003e5.0.1.RELEASE\u003c/version\u003e \u003ctype\u003epom\u003c/type\u003e \u003cscope\u003eimport\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c/dependencyManagement\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-webmvc\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003ejavax.servlet\u003c/groupId\u003e \u003cartifactId\u003ejavax.servlet-api\u003c/artifactId\u003e \u003cversion\u003e4.0.0-b02\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e 2. Configure DispatcherServlet package com.rimonmostafiz.config; import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer; public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer { protected String[] getServletMappings() { return new String[] {\"/\"}; } protected Class\u003c?\u003e[] getServletConfigClasses() { return new Class\u003c?\u003e[] {RootConfig.class}; } protected Class\u003c?\u003e[] getRootConfigClasses() { return new Class\u003c?\u003e[] {WebConfig.class}; } } In a Servlet 3.0, If an application has any class in the classpath which implements javax.servlet.ServletContainerInitializer¬†interface, then that class is used to configure the servlet container. Spring has an implementation of that interface called¬†SpringServletContainerInitializer¬†which seeks out any classes that implement WebApplicationInitializer and delegates to them for configuration. Spring 3.2 introduced a convenient base implementation of WebApplicationInitializer called AbstractAnnotationConfigDispatcherServletInitializer. Because our WebAppInitializer Class extends AbstractAnnotationConfigDispatcherServletInitializer (and thus implements WebApplicationInitializer), it will be automatically discovered when deployed in a Servlet 3.0 container and be used to configure the servlet context. WebAppInitializer overrides three methods. Let‚Äôs talk about them a bit getServletMappings() : This method Identifies one or more paths that DispatcherServlet will be mapped to. In this case, it‚Äôs mapped to ‚Äú/‚Äù, indicating that it will be the application‚Äôs default servlet. It will handle all requests coming into the application. getServletConfigClasses() : When DispatcherServlet starts up, it creates a Spring application context and starts loading it with beans declared in the configuration files or classes that it‚Äôs given. Here we are asking Dispatcher-Servlet to load its application context with beans defined in the WebConfig configuration class. getRootConfigClasses() : In Spring web applications, there‚Äôs often another application context. This other application context is created by¬†ContextLoaderListener Whereas DispatcherServlet is expected to load beans containing web components such as controllers, view resolvers, and handler mappings, ContextLoaderListener is expected to load the other beans in your application. These beans are typically the middle-tier and data-tier components that drive the back end of the application. 3. Enable Web MVC and WebConfig.class package com.rimonmostafiz.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.ViewResolver; import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer; import org.springframework.web.servlet.config.annotation.EnableWebMvc; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import org.springframework.web.servlet.view.InternalResourceViewResolver; @Configuration @EnableWebMvc @ComponentScan({\"com.rimonmostafiz\"}) public class WebConfig implements WebMvcConfigurer { @Bean // configure a jsp ","date":"2017-10-30","objectID":"rimonmostafiz.github.io/2017-10-30-a-bit-of-spring/:1:0","tags":["java","spring"],"title":"A Bit of Spring","uri":"rimonmostafiz.github.io/2017-10-30-a-bit-of-spring/"},{"categories":null,"content":"What is SDKMAN? [SDKMAN!](http://sdkman.io/index.html)¬†is a tool for managing parallel versions of multiple¬†Software Development Kits¬†on most Unix based systems. It provides a convenient Command Line Interface (CLI) and API for installing, switching, removing and listing Candidates. Its also open source. You can see the codes form¬†[SDKMAN's github repository](https://github.com/sdkman). If you are a developer then its very common that you work on multiple projects which use different JDK¬†version. Obviously, you can use¬†update-alternatives¬†to manage multiple¬†JDK¬†libraries on the same system to select which one you want to use as the main one. Did you ever tried¬†the¬†update-alternatives¬†and then¬†java -version¬†was correct, but the link in¬†$JAVA_HOME¬†and¬†javac -version was still wrong‚Ä¶ and you¬†changed that one manually? Using SDKMAN you can manage this very easily. SDKMAN will make your life easy. ","date":"2017-10-20","objectID":"rimonmostafiz.github.io/2017-10-20-manage-jdk-using-sdkman/:0:1","tags":["java","jdk","sdkman"],"title":"Manage JDK Using SDKMAN","uri":"rimonmostafiz.github.io/2017-10-20-manage-jdk-using-sdkman/"},{"categories":null,"content":"How to Install SDKMAN? Installing SDKMAN is quite easy.¬†Simply open a new terminal and enter: $ curl -s \"https://get.sdkman.io\" | bash Follow the instructions on-screen to complete the installation. Next enter: $ source \"$HOME/.sdkman/bin/sdkman-init.sh\" And SDKMAN is installed. :D Now run the following command to verify that your installation succeeded: $ sdk version SDKMAN 5.5.9+231 ","date":"2017-10-20","objectID":"rimonmostafiz.github.io/2017-10-20-manage-jdk-using-sdkman/:0:2","tags":["java","jdk","sdkman"],"title":"Manage JDK Using SDKMAN","uri":"rimonmostafiz.github.io/2017-10-20-manage-jdk-using-sdkman/"},{"categories":null,"content":"Usages of SDKMAN So SDKMAN is installed on your system, now what? On your terminal run: $ sdk list java Now in your terminal, a list will appear which will show available, local, installed and current versions of the SDK ================================================================================ Available Java Versions ================================================================================ + 9ea157 \u003e * 9.0.1-oracle 9.0.0-zulu 8u151-oracle 8u144-zulu 8u131-zulu + 7u80 7u141-zulu 6u93-zulu ================================================================================ + - local version * - installed \u003e - currently in use ================================================================================ As you can see in my system JDK 7, and JDK 9 is installed, among them I installed JDK 7 using local version. Now I want to install JDK 8 in my system, so first I need to downloaded¬†Java SE Development Kit 8u152(you can choose any other version you like) from Oracle JDK Download Page. Then extract the folder and then run following command: $ sdk install java 8u152 /home/rimonmostafiz/Downloads/jdk1.8.0_152 \u003e Linking java 8u152 to /home/rimonmostafiz/Downloads/jdk1.8.0_152 \u003e Done installing! # for you, oviously you need to specify your jdk folder loacaion It will install JDK 8 as a local version on the system. Actually, its linked to your JDK¬†folder, if you delete this folder, then the link will be broken, so you have to keep it there(in my case in my download folder). There is another way to do it, which I follow, After extract the folder I copy the folder to ~/.sdkman/candidates/java/ If you don‚Äôt to want this download and linking hassle, The following command will install a latest stable¬†version of java $ sdk install java If you want to choose the version $ sdk install java 8u151-oracle Make a given version the default: $ sdk default java¬†7u45 # check¬†java¬†version $ java -version java version \"1.7.0_80\" Java(TM) SE Runtime Environment (build 1.7.0_80-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode) # check javac version $ javac -version javac 1.7.0_80 # chack JAVA_HOME $JAVA_HOME bash: /home/rimonmostafiz/.sdkman/candidates/java/current: Is a directory To see the current version $ sdk current java Using java version 7u80 Now your default java version is JDK 7 and you are working on a project which is configured in JDK¬†8, and you need to compile the project JDK¬†8. Go to the project directory and then open a terminal and enter: $¬†sdk use java 8u152 \u003cspan style=\"color: #339966;\"\u003eUsing java version 8u152 in this shell.\u003c/span\u003e Now in the shell, JDK 8 is activated. You can compile your project in JDK 8 in this shell, your default version is not changed. :D Check other SDKMAN Usages from SDKMAN Site. Using SDKMAN you can manage not only JDK, can manage other SDK too. :D Want to see which SDK you can also manage using SDKMAN Run on your terminal $ sdk list #¬†a¬†list¬†will¬†appear ================================================================================ Available Candidates ================================================================================ q-quit /-search down j-down ?-search up k-up h-help -------------------------------------------------------------------------------- Groovy (2.4.5) http://www.groovy-lang.org/ Groovy is a powerful, optionally typed and dynamic language, with static-typing and static compilation capabilities, for the Java platform aimed at multiplying developers‚Äô productivity thanks to a concise, familiar and easy to learn syntax. It integrates smoothly with any Java program, and immediately delivers to your application powerful features, including scripting capabilities, Domain-Specific Language authoring, runtime and compile-time meta-programming and functional programming. $ sdk install groovy -------------------------------------------------------------------------------- Scala (2.11.7) http://www.scala-lang.org/ ... Visit this link¬†to see the SDK Installation Candida","date":"2017-10-20","objectID":"rimonmostafiz.github.io/2017-10-20-manage-jdk-using-sdkman/:0:3","tags":["java","jdk","sdkman"],"title":"Manage JDK Using SDKMAN","uri":"rimonmostafiz.github.io/2017-10-20-manage-jdk-using-sdkman/"},{"categories":null,"content":"Installing Kibana and Console Kibana is an open source analytics and visualization platform designed to work with Elasticsearch and Console (Previously its name was Sence, Sence was renamed to Console and it is available on Kibana 5) Kibana provides an interactive console for submitting requests to Elasticsearch directly from your browser. The Console plugin provides a UI to interact with the REST API of Elasticsearch. The console has two main areas: the¬†editor, where you compose requests to Elasticsearch, and the¬†response¬†pane, which displays the responses to the request. We need to install Kibana. Kibana is available in tar, zip, deb, rpm and docker package formats. For Linux and Darwin, we can download tar.gz package. Download Latest Kibana¬†version. Other versions can be found on the¬†Past Releases page. The 64-bit Linux archive for Kibana v5.6.0 can be downloaded and installed as follows: wget https://artifacts.elastic.co/downloads/kibana/kibana-5.6.0-linux-x86_64.tar.gz sha1sum kibana-5.6.0-linux-x86_64.tar.gz Then extract it as follows: tar -xzf kibana-5.6.0-linux-x86_64.tar.gz Now go to the directory: cd kibana-5.6.0-linux-x86_64 Now you can run kibana using the following command: ./bin/kibana By default, Kibana runs in the foreground, prints its logs to the standard output stdout, You can stop kibana by pressing.Ctrl-C log [13:56:16.449] [info][status][plugin:kibana@5.6.0] Status changed from uninitialized to green - Ready log [13:56:16.553] [info][status][plugin:elasticsearch@5.6.0] Status changed from uninitialized to yellow - Waiting for Elasticsearch log [13:56:16.590] [info][status][plugin:console@5.6.0] Status changed from uninitialized to green - Ready log [13:56:16.617] [info][status][plugin:metrics@5.6.0] Status changed from uninitialized to green - Ready log [13:56:16.882] [info][status][plugin:timelion@5.6.0] Status changed from uninitialized to green - Ready log [13:56:16.888] [info][listening] Server running at http://localhost:5601 log [13:56:16.890] [info][status][ui settings] Status changed from uninitialized to yellow - Elasticsearch plugin is yellow log [13:56:24.579] [info][status][plugin:elasticsearch@5.6.0] Status changed from yellow to yellow - No existing Kibana index found log [13:56:35.752] [info][status][plugin:elasticsearch@5.6.0] Status changed from yellow to green - Kibana index ready log [13:56:35.759] [info][status][ui settings] Status changed from yellow to green - Ready\u003ccode class=\"literal\"\u003e You can see from the log that Server running at http://localhost:5601, Kibana is a web application that you access through port 5601. All you need to do is point your web browser at the machine where Kibana is running and specify the port number. For example,¬†localhost:5601 In Kibana, just click on¬†Dev Tools: Now you can communicate with Elasticsearch through this Console. Now click on the green play icon to run the command. ","date":"2017-09-16","objectID":"rimonmostafiz.github.io/2017-09-16-installing-and-running-kibana/:0:1","tags":["elasticsearch","kibana"],"title":"Installing and Running Kibana","uri":"rimonmostafiz.github.io/2017-09-16-installing-and-running-kibana/"},{"categories":null,"content":"The easiest way to understand what Elasticsearch is to play with it, so let‚Äôs get started. Elastic search is easy to install. In this tutorial, I will walk you through the elasticsearch installation process in Ubuntu 16.04. Elasticsearch requires a recent version of java.¬†Oracle JDK version 1.8 is recommended. I am using JDK 1.8.0_131. Before you install Elasticsearch, please check your Java version first by running: java -version echo $JAVA_HOME We can download Elasticsearch from www.elastic.co/downloads along with all the release that has been made in the past. For each release zip tar archive, or DEB¬†and¬†RPM package is available. At the time of writing post the latest version of Elasticsearch is 5.6.0. Let‚Äôs download tar.gzfrom¬†[www.elastic.co/downloads/elasticsearch](http://www.elastic.co/downloads/elasticsearch) Then extract it as follows: tar -xvf elasticsearch-5.6.0.tar.gz Now go to the bin directory: cd¬†elasticsearch-5.6.0/bin And now we are ready to start our node and single cluster: ./elasticsearch Add¬†-d¬†if you want to run it in the background as a daemon. If you‚Äôre running Elasticsearch on Windows, simply run¬†bin\\elasticsearch.bat¬†instead. If everything goes well, you should see a bunch of messages that look like: [2017-09-15T23:49:35,321][INFO ][o.e.n.Node ] [] initializing ... [2017-09-15T23:49:35,729][INFO ][o.e.e.NodeEnvironment ] [AxGDTVX] using [1] data paths, mounts [[/ (/dev/sda2)]], net usable_space [19.1gb], net total_space [96.5gb], spins? [possibly], types [ext4] [2017-09-15T23:49:35,730][INFO ][o.e.e.NodeEnvironment ] [AxGDTVX] heap size [1.9gb], compressed ordinary object pointers [true] [2017-09-15T23:49:35,734][INFO ][o.e.n.Node ] node name [AxGDTVX] derived from node ID [AxGDTVX3RrmSo1oI4sAtFQ]; set [node.name] to override [2017-09-15T23:49:35,734][INFO ][o.e.n.Node ] version[5.6.0], pid[18814], build[781a835/2017-09-07T03:09:58.087Z], OS[Linux/4.4.0-93-generic/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_131/25.131-b11] [2017-09-15T23:49:35,735][INFO ][o.e.n.Node ] JVM arguments [-Xms2g, -Xmx2g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -Djdk.io.permissionsUseCanonicalPath=true, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Dlog4j.skipJansi=true, -XX:+HeapDumpOnOutOfMemoryError, -Des.path.home=/home/rimonmostafiz/Applications/elasticsearch-5.6.0] [2017-09-15T23:49:37,418][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [aggs-matrix-stats] [2017-09-15T23:49:37,418][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [ingest-common] [2017-09-15T23:49:37,418][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [lang-expression] [2017-09-15T23:49:37,418][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [lang-groovy] [2017-09-15T23:49:37,419][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [lang-mustache] [2017-09-15T23:49:37,419][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [lang-painless] [2017-09-15T23:49:37,419][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [parent-join] [2017-09-15T23:49:37,419][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [percolator] [2017-09-15T23:49:37,419][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [reindex] [2017-09-15T23:49:37,420][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [transport-netty3] [2017-09-15T23:49:37,420][INFO ][o.e.p.PluginsService ] [AxGDTVX] loaded module [transport-netty4] [2017-09-15T23:49:37,421][INFO ][o.e.p.PluginsService ] [AxGDTVX] no plugins loaded [2017-09-15T23:49:40,745][INFO ][o.e.d.DiscoveryModule ] [AxGDTVX] using discovery type [zen] [2017-09-15T23:49:41,885][INFO ][o.e.n.Node ] initialized [2017-09-15T23:49:41,885][INFO ][o.e.n.Node ] [AxGDTVX] starting ... [2017-09-15T23:49:","date":"2017-09-15","objectID":"rimonmostafiz.github.io/2017-09-15-installing-and-running-elasticsearch/:0:0","tags":["elasticsearch","java"],"title":"Installing and Running Elasticsearch","uri":"rimonmostafiz.github.io/2017-09-15-installing-and-running-elasticsearch/"},{"categories":null,"content":"Getting Started with Elasticsearch Basics This week finally I started learning Elasticsearch, I decided to keep some notes and share my concepts and understanding on this blog. So that if anyone wants to learn Elasticsearch he/she can learn with me. In this part, I will write about the some Elasticsearch theory and basic concepts anyone needs to understand. Most of them I learned form Elasticsearch¬†official site and some videos on youtube. What is Elasticsearch? Elasticsearch is a distributed, real-time, RESTful search and analytics engine. Its also a NoSQL database, which written in Java and¬†built on top of¬†Apache Lucene¬†technology like Solr.¬†It has Inverted indices and it is very easy to scale. You can speak to it using RESTful API with JSON over HTTP, using a web client from your favorite programming language, or even from the command line.¬†It‚Äôs also open-source, it is available under the¬†Apache 2 license. Elastic Search comes with lots of buzzwords and some key concepts, let me explain some of them a little‚Ä¶ Near Real Time: A near real-time search platform means there is a slight latency. When you index a document normally within one second it becomes searchable. Distributed: Elasticsearch is distributed by nature, I can start a node on my machine, and if you were to start nodes on your laptop‚Äôs they‚Äôd start talking to each other and form a cluster and they‚Äôd be able to spread the load up between the cluster. Which makes it really scalable. You can give it more hardware and it knows how to spread all the loads across all of this hardware automatically. Schema-less: A¬†schema¬†is a description of one or more fields that describe the document type and how to handle the different fields of a document. Elasticsearch is schema-less which not completely true, it has the ability to be schema-less, which means that documents can be indexed without explicitly providing a schema.¬†If you do not specify a mapping, Elasticsearch will by default generate one dynamically for you when¬†detecting new fields in documents during indexing. Cluster: A cluster is a collection of one or more nodes (servers) that together holds your entire data and provide federated indexing and search capabilities across all the nodes. Every cluster has a unique name, by default it is¬†elasticsearch. A node can be configured to join a specific cluster by the cluster name. Nodes: A node is a single server that is part of your cluster, stores your data, and participates in the cluster‚Äôs indexing and search capabilities. A node also identified by a name which is by default is a random¬†Universally Unique IDentifier (UUID) that is assigned to the node at startup. By default, each node is set up to join a cluster named¬†elasticsearch¬†which means that if you start up a number of nodes on your network and‚Äîassuming they can discover each other‚Äîthey will all automatically form and join a single cluster named¬†elasticsearch. Index: An index is a collection of documents that have somewhat similar characteristics.¬†An index is identified by a name (that must be all lowercase) and this name is used to refer to the index when performing indexing, search, update, and delete operations against the documents in it.¬†In a single cluster, you can define as many indexes as you want. Type: Within an index, you can define one or more types. A¬†type is defined for documents that have a set of common fields. For example, let‚Äôs assume you run a blogging platform and store all your data in a single index. In this index, you may define a type of user data, another type of blog data, and yet another type of comments data. Documents: A document is a basic unit of information that can be indexed. For example, you can have a document for a single customer, another document for a single product, and yet another for a single order. This document is expressed in¬†JSON¬†(JavaScript Object Notation) which is a ubiquitous internet data interchange format. Within an index/type, you can store as many documents a","date":"2017-09-15","objectID":"rimonmostafiz.github.io/2017-09-15-basics-and-key-concepts-of-elasticsearch/:0:1","tags":["elasticsearch","nosql","restful"],"title":"Basics and Key Concepts of Elasticsearch","uri":"rimonmostafiz.github.io/2017-09-15-basics-and-key-concepts-of-elasticsearch/"},{"categories":null,"content":"Solution idea of Uva 10311 - Goldbach and Euler","date":"2017-09-03","objectID":"rimonmostafiz.github.io/2017-09-03-uva-10311-goldbach-and-euler/","tags":["uva","prime-number","problem-solving"],"title":"Uva 10311 - Goldbach and Euler","uri":"rimonmostafiz.github.io/2017-09-03-uva-10311-goldbach-and-euler/"},{"categories":null,"content":"Problem Statement: UVa 10311 - Goldbach and Euler We can express the problem statement like: Given an integer N (0 \u003c N ‚â§¬†108). we have to find(if exists) two number P1 and P2 where, P1 and P2 both prime P1¬†+ P2 = n P1 \u003c P2 P2 - P1¬†is¬†minimized ","date":"2017-09-03","objectID":"rimonmostafiz.github.io/2017-09-03-uva-10311-goldbach-and-euler/:0:1","tags":["uva","prime-number","problem-solving"],"title":"Uva 10311 - Goldbach and Euler","uri":"rimonmostafiz.github.io/2017-09-03-uva-10311-goldbach-and-euler/"},{"categories":null,"content":"Solution Idea: First of all we need to find prime numbers between [0:108]. We can use memory efficient C++¬†implementation of Sieve Of Eratosthenes¬†to generate prime numbers up to¬†108¬†and store it in¬†an¬†Array. Now we have to find the P1 and P2, first idea come to mind is though we have the prime list of all number up to N we can normally iterate throw the prime list and find P1 and P2 = N - P1 and check if P2 is also a prime and if yes then we can calculate and minimized the P2 - P1. if couldn‚Äôt manage to find some P1 for that P2 is a prime also we can say¬†N is not the sum of two primes! Definitely this idea is going to work for finding P1 and P2 but you will end up with a TLE for this IDEA üòü Since the Time limit of the problem¬†10s, we need to find P1 and P2 more efficiently. If we consider N is an Odd Number, can‚Äôt we find P1 and P2 more¬†efficiently?¬†Well, it turns out that for odd numbers we can find P1 and P2 in¬†O(1) ! üòÅ¬†If¬†N¬†is odd, then one of the two primes¬†P1 and P2¬†has¬†to be even, while the other one has to be odd.¬†got it? we know ODD = ODD¬†+ EVEN.¬†If one of the primes has to be even, then that prime would have to be 2. So, if¬†N¬†is odd we simply check if¬†N - 2¬†is prime or not, and if it is, then we know that¬†P1 = 2 and P2 = N - 2,¬†otherwise there is no solution. We have concluded that for Odd numbers we can found P1 and P2¬†easily, now we have one¬†possible case remaining and that if N is Even.¬†There‚Äôs one thing that we could do that would improve significantly the complexity of the algorithm we can iterate¬†only over the prime numbers.¬†Since we¬†already¬†have a array full of primes below 108, we can binary search the location¬†of¬†N/2¬†and go down from it. Since there are¬†5.8 x 106¬†primes up to¬†108.¬†That would make for a worse case of¬†5.8 x 106¬†iterations instead of¬†108/2. Now We have improved things but, can we do even better? The discussion found in the problem statement about Goldbach‚Äôs conjecture and Euler‚Äôs ideas that there is¬†a conjecture that¬†an even number¬†can¬†always be expressed as the sum of two primes, though its¬†a conjecture but¬†we can assume it‚Äôs true for our purposes. This means that we can be reasonably confident that the process of finding¬†P1¬†will succeed for most even numbers, hopefully quickly enough that it doesn‚Äôt have to check millions of primes.¬†Note that I said¬†most¬†even numbers, because we need two¬†distinct¬†primes P1 and P2¬†remember? For example, 14 can be expressed as the sum of two primes 7 + 7 but not as the sum of two distinct primes. ","date":"2017-09-03","objectID":"rimonmostafiz.github.io/2017-09-03-uva-10311-goldbach-and-euler/:0:2","tags":["uva","prime-number","problem-solving"],"title":"Uva 10311 - Goldbach and Euler","uri":"rimonmostafiz.github.io/2017-09-03-uva-10311-goldbach-and-euler/"},{"categories":null,"content":"Code Try to code it yourself, if you can‚Äôt code it or need any help let me know in the comments. Happy Coding üòÉ ","date":"2017-09-03","objectID":"rimonmostafiz.github.io/2017-09-03-uva-10311-goldbach-and-euler/:0:3","tags":["uva","prime-number","problem-solving"],"title":"Uva 10311 - Goldbach and Euler","uri":"rimonmostafiz.github.io/2017-09-03-uva-10311-goldbach-and-euler/"},{"categories":null,"content":"Solution idea of UVa 406 - Prime Cuts","date":"2017-08-29","objectID":"rimonmostafiz.github.io/2017-08-29-uva-406-prime-cuts/","tags":["uva","prime-number","problem-solving"],"title":"Uva 406 - Prime Cuts","uri":"rimonmostafiz.github.io/2017-08-29-uva-406-prime-cuts/"},{"categories":null,"content":"Problem Statement: UVa 406 ‚Äì Prime Cuts Before beginning I want to say the problem description seems quite¬†awkward to me, for me it took a time to understand what is actually asked by the problem. but when I found out its very easy to code. ","date":"2017-08-29","objectID":"rimonmostafiz.github.io/2017-08-29-uva-406-prime-cuts/:0:1","tags":["uva","prime-number","problem-solving"],"title":"Uva 406 - Prime Cuts","uri":"rimonmostafiz.github.io/2017-08-29-uva-406-prime-cuts/"},{"categories":null,"content":"Solution Idea: First of all use¬†Sieve of Eratosthenes¬†to generate primes between 1000.¬†You will be given¬†two numbers N and C, then you need to¬†make a list of primes between 1 to N(inclusive). For this problem you need to¬†consider 1 as a Prime. Now find out the size of the list. Let represent the size of the list with S. Now if size of the list is even then you need to print C*2 items. If the size of the list is odd then you need to print C*2 - 1 items. Consider K is the number of item you need to print. Here comes the question form where should start printing form the list. The condition is if K \u003e S then you need to print all primes form 1 to N, otherwise you should start form (S - K) / 2 th position of the list and print next K items. ","date":"2017-08-29","objectID":"rimonmostafiz.github.io/2017-08-29-uva-406-prime-cuts/:0:2","tags":["uva","prime-number","problem-solving"],"title":"Uva 406 - Prime Cuts","uri":"rimonmostafiz.github.io/2017-08-29-uva-406-prime-cuts/"},{"categories":null,"content":"Code Try to code it yourself, if you can‚Äôt code it or need any help let me know in the comments. Happy Coding üòÉ ","date":"2017-08-29","objectID":"rimonmostafiz.github.io/2017-08-29-uva-406-prime-cuts/:0:3","tags":["uva","prime-number","problem-solving"],"title":"Uva 406 - Prime Cuts","uri":"rimonmostafiz.github.io/2017-08-29-uva-406-prime-cuts/"},{"categories":null,"content":"You will need a free Oracle account to log in and download SQL Developer from¬†Oracle¬†Technology Network¬†site. For ubuntu download the Other Platforms¬†version. At the time of writing this post, I download version is¬†sqldeveloper-17.2.0.188.1159-no-jre.zip. You will also need Java to run Oracle SQL developer. After download, I moved the download file to¬†/home/rimonmostafiz/Applications (you can choose any other location you prefer). Move the download file to¬†/home/rimonmostafiz/Applications. you can choose any other location you prefer. $ sudo mv¬†sqldeveloper-17.2.0.188.1159-no-jre.zip /home/rimonmostafiz/Applications $ cd /home/rimonmostafiz/Applications $ sudo unzip sqldeveloper-17.2.0.188.1159-no-jre.zip Next link over an in-path launcher for Oracle SQL Developer $ sudo ln -s /home/rimonmostafiz/Applications/sqldeveloper/sqldeveloper.sh /bin/sqldeveloper $ sudo rm /usr/local/bin/sqldeveloper*.zip Edit /home/rimonmostafiz/Applications/sqldeveloper/sqldeveloper.sh and replace it‚Äôs content to: #!/bin/bash unset -v GNOME_DESKTOP_SESSION_ID cd /home/rimonmostafiz/Applications/sqldeveloper/sqldeveloper/bin ./sqldeveloper \"$@\" If ./sqldeveloper permission denied error occurs Try this #!/bin/bash unset -v GNOME_DESKTOP_SESSION_ID cd /home/rimonmostafiz/Applications/sqldeveloper/sqldeveloper/bin \u0026\u0026 bash sqldeveloper $* Now run sql developer by typing command $ sqldeveloper Note: When you run Sql Developer at the first time, you need to specify the path of JDK‚Äôs folder. In my computer, JDK stored at /home/rimonmostafiz/.sdkman/candidates/java/8u152 I prefer use SDKMAN to manage my different versions of java. You can read details about SDKMAN from My Manage JDK using SDKMAN¬†post.** Now we can create a desktop application for easy to use: $ cd /usr/share/applications/ $ sudo vim sqldeveloper.desktop then add the following lines to the file [Desktop Entry] Exec=sqldeveloper Terminal=false StartupNotify=true Categories=GNOME;Oracle; Type=Application Icon=/home/rimonmostafiz/Applications/sqldeveloper/icon.png Name=Oracle SQL Developer Finally run $ sudo update-desktop-database Now you will find Oracle SQL Developer in your app launcher. Ubuntu Verson: 16.04 LTS JDK Verison: 1.8 SQL Developer Version: sqldeveloper-17.2.0.188.1159-no-jre.zip ","date":"2017-08-28","objectID":"rimonmostafiz.github.io/2017-08-28-oracle-sql-developer-in-ubuntu/:0:0","tags":["oracle","sqldeveloper","linux","ubuntu"],"title":"Oracle SQL Developer in Ubuntu","uri":"rimonmostafiz.github.io/2017-08-28-oracle-sql-developer-in-ubuntu/"},{"categories":null,"content":"Some useful git commands for developers","date":"2017-08-17","objectID":"rimonmostafiz.github.io/2017-08-17-git-notes/","tags":["git","command","notes"],"title":"Git Notes","uri":"rimonmostafiz.github.io/2017-08-17-git-notes/"},{"categories":null,"content":"Git cheat sheet for everyday life. Will update this in future‚Ä¶ $ git init # transform the current directory into a Git repository. This adds a¬†.git¬†folder to the current directory and makes it possible to start recording revisions $ git config --global user.email \"you@example.com\" $ git config --global user.name \"Your Name\" $ git config --global color.status auto $ git config --global color.diff auto $ git config --global color.branch auto $ git clone \u003cgit host\u003e:/repo/\u003cproject name\u003e.git # clone repository to local system $ git add \u003cfile name\u003e # add file to local repository # the git add command moves changes from the working directory to staging area, staging area is virtual temporary area where we prepare a snapshot of a set of changes before committing them to the official history $ git add -A # stages All $ git add . # stages new and modified, without deleted $ git add -u # stages modified and deleted, without new $ git status # check the Status of the file # the git status¬†command displays the state of the working directory and the staged snapshot $ git checkout -- \u003cfile\u003e # reverts back the modified file to the one in the repository $ git commit -m \"commit message\" # the git commit takes the staged snapshot(think as all files) and commits it to the project history. $ git commit --amend # update the last commit message $ git push origin \u003cbranch name\u003e # this command specifies that you are pushing to the a branch # a branch represents an independent line of development for your repository. Think of it as a brand-new working directory, staging area, and project history. Before you create any new branches, you automatically start out with the main branch (called master). $ git diff \u003ccommit id 1\u003e \u003ccommit id 2\u003e # show changes between two different commit $ git diff # with no arguments shows the difference between working directory and staging area * $ git diff --staged # show the difference between the staging area and latest commit in repository files which are not same $ git log # show log $ git log --stat # give some statistics about which file have changed in each commit $ git log --graph --oneline master coins. #see the visual representation of the commit history is $ git config --global color.ui auto $ git checkout \u003ccommit id\u003e # go to specific version of code using commit id $ git checkout \u003cbranch name\u003e # select the branch $ git checkout -b \u003cnew branch name\u003e # combine of 2 command [git branch \u003cnew branch name\u003e] \u0026 [git checkout \u003cnew branch name\u003e] $ git pull --all # the¬†git pull¬†command merges the file from your remote repository into your local repository with a single command $ git tag # normal tag $ git tag -a # anotated tag $ git reset --hard # discard any changes in the working directory or staging area (very careful for this command, its cant be reversible) $ git branch #show all branches $ git stash $ git stash list $ git stash pop ","date":"2017-08-17","objectID":"rimonmostafiz.github.io/2017-08-17-git-notes/:0:0","tags":["git","command","notes"],"title":"Git Notes","uri":"rimonmostafiz.github.io/2017-08-17-git-notes/"},{"categories":null,"content":"At the time of writing, there is no official Google Drive client for Ubuntu or Linux Mint but if you need to use it then there is an unofficial client called Grive2.¬†Grive is a Google Drive client for GNU/Linux systems. It allows the synchronization of all your files on the cloud with a directory of your choice and the upload of new files to Google Drive. Those of you used Google Drive client on Windows or Mac, Grive2 will do the same for you in Ubuntu or Linux Mint. To install Grive2 in Ubuntu, Linux Mint and derivatives by using the main WebUpd8 PPA, use the following commands: $ sudo add-apt-repository ppa:nilarimogard/webupd8 $ sudo apt-get update $ sudo apt-get install grive Step 1:¬†Grive2 will download/upload new or changed files from the directory you run it. You can name it anything you want to. Let‚Äôs create a new folder ‚Äì I‚Äôll create it on my /home/rimonmostafiz folder and going to name it¬†GoogleDrive $ mkdir -p ~/GoogleDrive Step 2:¬†Next, navigate using the terminal into the newly created ‚ÄúGoogleDrive‚Äù folder: $ cd ~/GoogleDrive Step 3: The first time you run Grive2, you must use the -a argument to grant it permission to access your Google Drive: grive -a After running the command above, an URL should be displayed in the terminal. Copy that URL and paste it in a web browser. In the newly loaded page, you‚Äôll be asked to give Grive permission to access your Google Drive and after clicking Allow access, an authentication code will be displayed. Copy that code and paste it in the terminal where you ran Grive2. That‚Äôs it. Grive 2 Will start syncing your files and folder from Google Drive, wait for sync to complete for the first time. Don‚Äôt close the terminal. Now each time you want to sync Google Drive with your local GoogleDrive¬†folder, navigate to the GoogleDrive¬†folder and run grive (this time without -a since you‚Äôve already authenticated Grive with Google Drive). If you want to sync only one sub-folder (a folder from your ~/GoogleDrive directory) with Google Drive, use: $ grive -s folder # replace folder with the name of the sub-folder you want to sync To see all the available options, type: grive --help Courtesy:¬†askubuntu.com ","date":"2017-08-16","objectID":"rimonmostafiz.github.io/2017-08-16-google-drive-in-ubuntu/:0:0","tags":["google-drive","linux","ubuntu"],"title":"Google Drive in Ubuntu","uri":"rimonmostafiz.github.io/2017-08-16-google-drive-in-ubuntu/"},{"categories":null,"content":"A memory efficient technique for prime number generation","date":"2017-08-16","objectID":"rimonmostafiz.github.io/2017-08-16-sieve-of-eratosthenes-memory-efficient-implementation/","tags":["algorithms","math","prime-number","number-theory"],"title":"Sieve of Eratosthenes (Memory Efficient Implementation)","uri":"rimonmostafiz.github.io/2017-08-16-sieve-of-eratosthenes-memory-efficient-implementation/"},{"categories":null,"content":"Say we want to find all prime numbers up to an integer¬†N where N is¬†108.¬†If we write a regular implementation of¬†Sieve Of Eratosthenes¬†using a bool array¬†for each integer in the range [1:N]¬†then we could end up using¬†N bytes of memory, which would roughly be 95¬†MB¬†which is a not a very small memory. Lets see how can we¬†reduce the memory, the main idea here is we can store a¬†Boolean¬†value in a single bit, so¬†we¬†can store 8¬†Boolean¬†values in a single byte. Yet another idea is we know¬†there is only one even prime number which is 2 so we¬†don‚Äôt¬†need to calculate for other even numbers. With this in mind we can reduce¬†the memory¬†requirement¬†half by simply not storing information for even numbers, but¬†obviously¬†we¬†need to¬†handle this only even number 2 on our own. With these If we store this information in 4-byte integers, then we require only N/32 integers. #include \u003ciostream\u003e #include \u003ccstdio\u003e using namespace std; #define MAX 100000000 // 10^8 #define LMT 10000 // sqrt of MAX #define LEN 5800032 // maximum possible different primes unsigned flag[MAX\u003e\u003e6], primes[LEN]; #define ifc(n) (flag[n\u003e\u003e6]\u0026(1\u003c\u003c((n\u003e\u003e1)\u002631))) #define isc(n) (flag[n\u003e\u003e6]|=(1\u003c\u003c((n\u003e\u003e1)\u002631))) void sieve() { unsigned i, j, k; for(i=3; i\u003cLMT; i+=2) if(!ifc(i)) for(j=i*i, k=(i\u003c\u003c1); j\u003cMAX; j+=k) isc(j); primes[0] = 2; for(i=3, k=1; i\u003cMAX; i+=2) if(!ifc(i)) primes[k++] = i; } int main() { sieve(); return 0; } ","date":"2017-08-16","objectID":"rimonmostafiz.github.io/2017-08-16-sieve-of-eratosthenes-memory-efficient-implementation/:0:0","tags":["algorithms","math","prime-number","number-theory"],"title":"Sieve of Eratosthenes (Memory Efficient Implementation)","uri":"rimonmostafiz.github.io/2017-08-16-sieve-of-eratosthenes-memory-efficient-implementation/"},{"categories":null,"content":"Explanation: Lets talk about the these macros first #define MAX 100000000 // 10^8 #define LMT 10000 // sqrt of MAX #define LEN 5800032 // maximum possible different primes MAX is the maximum range (108), we need to calculate our prime numbers up to MAX LMT is the sqrt of MAX, a number X is prime if it is not divisible by any prime number up to sqrt of X. this is the main idea of¬†Sieve Of Eratosthenes. LEN is size of Array we store out primes. The variable¬†declaration¬†unsigned flag[MAX\u003e\u003e6], primes[LEN]; flag[MAX¬ª6] is actually flag[MAX/64] and¬†And why we divide MAX by 64¬†? Next the primes Array for storing all primes up to MAX Now the super macro, which is doing all the things for us #define ifc(n) (flag[n\u003e\u003e6]\u0026(1\u003c\u003c((n\u003e\u003e1)\u002631))) #define isc(n) (flag[n\u003e\u003e6]|=(1\u003c\u003c((n\u003e\u003e1)\u002631))) ifc checks if a specific bit is 1 or 0 isc sets a specific bit 1 to mark it as composite in flag array. In¬†bit-wise¬†sieve a specific value N located in [N/32]th¬†index, and on that index [N%32]th¬†bit from LSB(Right to left).¬†But as we are¬†considering the¬†odd numbers only, we can map N with N/2. Now if we¬†replace N with N/2, The [N/32]th¬†index now becomes [N/2/32] = [N/64] = [N¬ª6] And [N%32]th¬†bit position becomes ((N/2)%32) = (N¬ª1)\u002631 We know, modding with a power of 2 is same as AND ing (\u0026) with (same power of 2)-1. But why we are using bit shifting/Operations? üòï Because bit is fun and faster. üòâ This implementation reserves about [108/64] = [MAX¬ª64]¬†integers for the flag array, which is about 6MB of memory.¬†Since there are 5.8 Million primes under 108, this would require an extra 4 x 5.8 x 106¬†bytes of array(primes array) which is¬†roughly¬†22 MB which is obviously far better than¬†95 MB üòÉ ","date":"2017-08-16","objectID":"rimonmostafiz.github.io/2017-08-16-sieve-of-eratosthenes-memory-efficient-implementation/:0:1","tags":["algorithms","math","prime-number","number-theory"],"title":"Sieve of Eratosthenes (Memory Efficient Implementation)","uri":"rimonmostafiz.github.io/2017-08-16-sieve-of-eratosthenes-memory-efficient-implementation/"},{"categories":null,"content":"Least Common Multiple (LCM) of two number a and b is the smallest positive integer that is divisible by both a and b. Since division of integers by zero is undefined, this definition has meaning only if a and b are both different from zero. int lcm(int a, int b) { for ( int i = 1; ; i ) { if ( i % a == 0 \u0026\u0026 i % b == 0 ) { return i; } } } There is an another technique for LCM finding called Reduction by the greatest common divisor int lcm(int a, int b) { return a * b / gcd(a, b); // so we need to write gcd() function for this one } there is a chance of integer overflow if we write a * b / gcd(a, b) so we write it like int lcm(int a, int b) { return (a / gcd(a, b)) * b; } the above code works fine for Int, but it is safe to write a template for LCM, I personally prefer that #include \u003ccstdio\u003e template \u003c class T \u003e T gcd(T a, T b) { return (b != 0 ? gcd\u003cT\u003e(b, a%b) : a); } // need to include GCD also for LCM template \u003c class T \u003e T lcm(T a, T b) { return (a / gcd\u003cT\u003e(a, b) * b); } int main() { // your code here return 0; } ","date":"2017-08-15","objectID":"rimonmostafiz.github.io/2017-08-15-least-common-multiple-lcm/:0:0","tags":["algorithms","math","lcm","gcd","number-theory"],"title":"Least Common Multiple (LCM)","uri":"rimonmostafiz.github.io/2017-08-15-least-common-multiple-lcm/"},{"categories":null,"content":"Greatest Common Divisor (GCD) of two number a and b is the largest number that divides both a and b evenly. if g = gcd(a, b), then g divides both a and b when at least one of them is non zero. when gcd(a, b) == 1 then we said a and b is co-prime or relatively prime numbers. int gcd (int a, int b) { int g; for (int i = 1; i \u003c= min(a, b); i++) { if (a%i == 0 \u0026\u0026 b%i == 0) { g = i; } } return g; } Now there is a much more efficient algorithm for finding GCD which is called Subtraction-based Euclidean algorithm. For GCD of¬†a¬†and¬†b¬†first of all we need to think a grid of size¬†a √ó b. Now we want to cover the grid with square tile. we assume¬†a¬†is greater then¬†b. We first attempt to tile the¬†a √ó b¬†rectangle using¬†b √ó b¬†square tiles, This leaves an¬†r0 √ó b¬†residual rectangle un-tiled, where¬†r0\u003cb. Then¬†we attempt to tile the un-tiled part of the¬†a x b¬†rectangle by¬†r0 x r0¬†square tiles. Which leaves an¬†**r1 x r0¬†**residual rectangle un-tiled (now this time¬†r1\u003cr0) and so on. The sequence ends when there is no residual rectangle, i.e., when the square tiles cover the previous residual rectangle exactly. The length of the sides of the smallest square tile is the GCD of the dimensions of the original rectangle. ","date":"2017-08-15","objectID":"rimonmostafiz.github.io/2017-08-15-greatest-common-divisor-gcd/:0:0","tags":["algorithms","math","gcd","number-theory"],"title":"Greatest Common Divisor (GCD)","uri":"rimonmostafiz.github.io/2017-08-15-greatest-common-divisor-gcd/"},{"categories":null,"content":"Example: Now we will try to find the greatest common divisor of a = 1071 and b = 462. ( we are assuming that the¬†a\u003eb¬†) __Euclidean Algorithm for GCD__ Animation : wikimedia **STEP 0:** First the multiples of¬†b(462)¬†are subtracted from¬†a(1071)¬†until the remainder is less than¬†b(462). Two such multiples can be subtracted¬†(q0 = 2), leaving a remainder of 147: 1071 = 2 √ó 462 + 147. **STEP 1:** Then multiples of 147 are subtracted from 462 until the remainder is less than 147. Three multiples can be subtracted¬†(q1 = 3), leaving a remainder of 21: 462 = 3 √ó 147 + 21. **STEP 2:** Then multiples of 21 are subtracted from 147 until the remainder is less than 21. Seven multiples can be subtracted¬†(q2 = 7), leaving no remainder: 147 = 7 √ó 21 + 0. Since the last remainder is zero, the algorithm ends with 21 as the greatest common divisor of 1071 and 462. Step k Equation Quotient and remainder 0 1071 = q0 462 + r0 q0 = 2 and r0 = 147 1 426 = q1 147 + r1 q1 = 3 and r1 = 21 2 147 = q2 21 + r2 q2 = 7 and r2 = 0 /*GCD using Euclidean Algorithm*/ int gcd( int a, int b ) { while ( true ) { int r = a % b; if ( r == 0 ) { return b; } else { a = b; // putting larger one in a b = r; // putting smaller one in b } } } There is an recursive representation of this algorithms int gcd(int a, int b) { if( b == 0 ) return a; else return gcd( b, a % b ); } this can be write like int gcd( int a, int b ) { return b==0 ? a : gcd( b, a % b ); } There is some problem in above code for GCD, that will only works for Int, if you want to find GCD for Long Long then you need to implement above for Long Long Int. Or you can write a template for GCD which will work for both Int and Long Long Int #include \u003ccstdio\u003e template \u003c class T \u003e T gcd(T a, T b) { return (b != 0 ? gcd\u003cT\u003e(b, a%b) : a); } int main() { // your code here return 0; } In GNU compiler there is a builtin function for calculating GCD int g = __gcd(a, b); // don't forget to include algorithm header ","date":"2017-08-15","objectID":"rimonmostafiz.github.io/2017-08-15-greatest-common-divisor-gcd/:0:1","tags":["algorithms","math","gcd","number-theory"],"title":"Greatest Common Divisor (GCD)","uri":"rimonmostafiz.github.io/2017-08-15-greatest-common-divisor-gcd/"},{"categories":null,"content":" It is not our abilities that show what we truly are, It is our choices. Hi, Thanks for stopping by üëç I‚Äôm Molla Mostafizur Rahman Rimon (Rimon Mostafiz in short) a Software Enginner from Dhaka, Bangladesh. ","date":"2017-08-15","objectID":"rimonmostafiz.github.io/pages/about/:0:0","tags":null,"title":"About","uri":"rimonmostafiz.github.io/pages/about/"},{"categories":null,"content":"Education ‚úèÔ∏è BSc in Computer Science and Enginnering United International University September, 2011 - September, 2016 ","date":"2017-08-15","objectID":"rimonmostafiz.github.io/pages/about/:0:1","tags":null,"title":"About","uri":"rimonmostafiz.github.io/pages/about/"},{"categories":null,"content":"Work üè¢ Software Engineer Tiger IT Bangladesh Limited December, 2016 - Present Competitive Programming Trainer United International University April, 2018 - October, 2018 ","date":"2017-08-15","objectID":"rimonmostafiz.github.io/pages/about/:0:2","tags":null,"title":"About","uri":"rimonmostafiz.github.io/pages/about/"},{"categories":null,"content":"Why Blog ‚ùì When you read something, you simply convince yourself that you understand it properly. But when you write down the same thing, you have to prove that you understand it properly by putting it into meaningful sentences. In that way, writing has helped me put together my knowledge in a systematic manner. This site is primarily focused on self-improvement through understanding and better thinking. I keep notes on things I learn from books, articles, speeches, and more, and publish it here. One other motivation was to document my learning so that somebody else can take benefit from it. Now go ahead, and read some of the stuff form blog posts and add me to your RSS reader. üòÉ If you wanted to know what I‚Äôm up to now, you can visit the now page. ","date":"2017-08-15","objectID":"rimonmostafiz.github.io/pages/about/:0:3","tags":null,"title":"About","uri":"rimonmostafiz.github.io/pages/about/"},{"categories":null,"content":"!important ‚ö†Ô∏è This blog is built using Hugo and hosted in Netlify for free. Right now I‚Äôm using a theme named casper and the source code of this blog can be found on GitHub. You can find me on¬†Linkedin,¬†Github, StackOverflow, and Twitter. üìß If you are want to contact me for anything, just drop me an mail at rimonmostafiz[at]gmail[dot]com ","date":"2017-08-15","objectID":"rimonmostafiz.github.io/pages/about/:0:4","tags":null,"title":"About","uri":"rimonmostafiz.github.io/pages/about/"}]